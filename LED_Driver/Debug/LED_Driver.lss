
LED_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000810  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000810  00000884  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000018b4  00000000  00000000  00000884  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000051f  00000000  00000000  00002138  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000e0  00000000  00000000  00002658  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007de  00000000  00000000  00002738  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000262  00000000  00000000  00002f16  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000378  00000000  00000000  00003178  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000140  00000000  00000000  000034f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000024f  00000000  00000000  00003630  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000051e  00000000  00000000  0000387f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e1       	ldi	r30, 0x10	; 16
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 90 02 	call	0x520	; 0x520 <main>
  8a:	0c 94 06 04 	jmp	0x80c	; 0x80c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Delay_ms>:
#endif

void Delay_ms(f64 period)
{
	u32 i;
	u32 counter=( ( period /1000) * F_CPU )/2;
  92:	20 e0       	ldi	r18, 0x00	; 0
  94:	30 e0       	ldi	r19, 0x00	; 0
  96:	4a e7       	ldi	r20, 0x7A	; 122
  98:	54 e4       	ldi	r21, 0x44	; 68
  9a:	0e 94 be 02 	call	0x57c	; 0x57c <__divsf3>
  9e:	20 e0       	ldi	r18, 0x00	; 0
  a0:	34 e2       	ldi	r19, 0x24	; 36
  a2:	44 e7       	ldi	r20, 0x74	; 116
  a4:	59 e4       	ldi	r21, 0x49	; 73
  a6:	0e 94 a3 03 	call	0x746	; 0x746 <__mulsf3>
  aa:	20 e0       	ldi	r18, 0x00	; 0
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	40 e0       	ldi	r20, 0x00	; 0
  b0:	5f e3       	ldi	r21, 0x3F	; 63
  b2:	0e 94 a3 03 	call	0x746	; 0x746 <__mulsf3>
  b6:	0e 94 26 03 	call	0x64c	; 0x64c <__fixunssfsi>
  ba:	46 2f       	mov	r20, r22
  bc:	57 2f       	mov	r21, r23
  be:	68 2f       	mov	r22, r24
  c0:	79 2f       	mov	r23, r25
	for (i=0;i<counter;i++)
  c2:	41 15       	cp	r20, r1
  c4:	51 05       	cpc	r21, r1
  c6:	61 05       	cpc	r22, r1
  c8:	71 05       	cpc	r23, r1
  ca:	59 f0       	breq	.+22     	; 0xe2 <Delay_ms+0x50>
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	dc 01       	movw	r26, r24
  d2:	01 96       	adiw	r24, 0x01	; 1
  d4:	a1 1d       	adc	r26, r1
  d6:	b1 1d       	adc	r27, r1
  d8:	84 17       	cp	r24, r20
  da:	95 07       	cpc	r25, r21
  dc:	a6 07       	cpc	r26, r22
  de:	b7 07       	cpc	r27, r23
  e0:	c1 f7       	brne	.-16     	; 0xd2 <Delay_ms+0x40>
  e2:	08 95       	ret

000000e4 <Delay_us>:
}

void Delay_us(f64 period)
{
	u32 i;
	u32 counter=( ( period /1000000) * F_CPU )/2;
  e4:	20 e0       	ldi	r18, 0x00	; 0
  e6:	34 e2       	ldi	r19, 0x24	; 36
  e8:	44 e7       	ldi	r20, 0x74	; 116
  ea:	59 e4       	ldi	r21, 0x49	; 73
  ec:	0e 94 be 02 	call	0x57c	; 0x57c <__divsf3>
  f0:	20 e0       	ldi	r18, 0x00	; 0
  f2:	34 e2       	ldi	r19, 0x24	; 36
  f4:	44 e7       	ldi	r20, 0x74	; 116
  f6:	59 e4       	ldi	r21, 0x49	; 73
  f8:	0e 94 a3 03 	call	0x746	; 0x746 <__mulsf3>
  fc:	20 e0       	ldi	r18, 0x00	; 0
  fe:	30 e0       	ldi	r19, 0x00	; 0
 100:	40 e0       	ldi	r20, 0x00	; 0
 102:	5f e3       	ldi	r21, 0x3F	; 63
 104:	0e 94 a3 03 	call	0x746	; 0x746 <__mulsf3>
 108:	0e 94 26 03 	call	0x64c	; 0x64c <__fixunssfsi>
 10c:	46 2f       	mov	r20, r22
 10e:	57 2f       	mov	r21, r23
 110:	68 2f       	mov	r22, r24
 112:	79 2f       	mov	r23, r25
	for (i=0;i<counter;i++)
 114:	41 15       	cp	r20, r1
 116:	51 05       	cpc	r21, r1
 118:	61 05       	cpc	r22, r1
 11a:	71 05       	cpc	r23, r1
 11c:	59 f0       	breq	.+22     	; 0x134 <Delay_us+0x50>
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	dc 01       	movw	r26, r24
 124:	01 96       	adiw	r24, 0x01	; 1
 126:	a1 1d       	adc	r26, r1
 128:	b1 1d       	adc	r27, r1
 12a:	84 17       	cp	r24, r20
 12c:	95 07       	cpc	r25, r21
 12e:	a6 07       	cpc	r26, r22
 130:	b7 07       	cpc	r27, r23
 132:	c1 f7       	brne	.-16     	; 0x124 <Delay_us+0x40>
 134:	08 95       	ret

00000136 <MDIO_voidSetPinDirection>:
#include "DIO_interface.h"
#include "DIO_private.h"

void MDIO_voidSetPinDirection(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Direction)
{
    switch(Copy_u8Port)
 136:	81 30       	cpi	r24, 0x01	; 1
 138:	49 f1       	breq	.+82     	; 0x18c <MDIO_voidSetPinDirection+0x56>
 13a:	81 30       	cpi	r24, 0x01	; 1
 13c:	38 f0       	brcs	.+14     	; 0x14c <MDIO_voidSetPinDirection+0x16>
 13e:	82 30       	cpi	r24, 0x02	; 2
 140:	09 f4       	brne	.+2      	; 0x144 <MDIO_voidSetPinDirection+0xe>
 142:	44 c0       	rjmp	.+136    	; 0x1cc <MDIO_voidSetPinDirection+0x96>
 144:	83 30       	cpi	r24, 0x03	; 3
 146:	09 f0       	breq	.+2      	; 0x14a <MDIO_voidSetPinDirection+0x14>
 148:	7e c0       	rjmp	.+252    	; 0x246 <MDIO_voidSetPinDirection+0x110>
 14a:	5f c0       	rjmp	.+190    	; 0x20a <MDIO_voidSetPinDirection+0xd4>
	{
		case DIOA : 
		if (Copy_u8Direction==INPUT)
 14c:	44 23       	and	r20, r20
 14e:	71 f4       	brne	.+28     	; 0x16c <MDIO_voidSetPinDirection+0x36>
		{
			CLR_BIT(DDRA,Copy_u8Pin);
 150:	2a b3       	in	r18, 0x1a	; 26
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	ac 01       	movw	r20, r24
 158:	02 c0       	rjmp	.+4      	; 0x15e <MDIO_voidSetPinDirection+0x28>
 15a:	44 0f       	add	r20, r20
 15c:	55 1f       	adc	r21, r21
 15e:	6a 95       	dec	r22
 160:	e2 f7       	brpl	.-8      	; 0x15a <MDIO_voidSetPinDirection+0x24>
 162:	ba 01       	movw	r22, r20
 164:	60 95       	com	r22
 166:	62 23       	and	r22, r18
 168:	6a bb       	out	0x1a, r22	; 26
 16a:	08 95       	ret
		} 
		else if (Copy_u8Direction==OUTPUT)
 16c:	41 30       	cpi	r20, 0x01	; 1
 16e:	09 f0       	breq	.+2      	; 0x172 <MDIO_voidSetPinDirection+0x3c>
 170:	6a c0       	rjmp	.+212    	; 0x246 <MDIO_voidSetPinDirection+0x110>
		{
			SET_BIT(DDRA,Copy_u8Pin);
 172:	2a b3       	in	r18, 0x1a	; 26
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	ac 01       	movw	r20, r24
 17a:	02 c0       	rjmp	.+4      	; 0x180 <MDIO_voidSetPinDirection+0x4a>
 17c:	44 0f       	add	r20, r20
 17e:	55 1f       	adc	r21, r21
 180:	6a 95       	dec	r22
 182:	e2 f7       	brpl	.-8      	; 0x17c <MDIO_voidSetPinDirection+0x46>
 184:	ba 01       	movw	r22, r20
 186:	62 2b       	or	r22, r18
 188:	6a bb       	out	0x1a, r22	; 26
 18a:	08 95       	ret
			/* error */
		}
		break;
		
		case DIOB :
		if (Copy_u8Direction==INPUT)
 18c:	44 23       	and	r20, r20
 18e:	71 f4       	brne	.+28     	; 0x1ac <MDIO_voidSetPinDirection+0x76>
		{
			CLR_BIT(DDRB,Copy_u8Pin);
 190:	27 b3       	in	r18, 0x17	; 23
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	ac 01       	movw	r20, r24
 198:	02 c0       	rjmp	.+4      	; 0x19e <MDIO_voidSetPinDirection+0x68>
 19a:	44 0f       	add	r20, r20
 19c:	55 1f       	adc	r21, r21
 19e:	6a 95       	dec	r22
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <MDIO_voidSetPinDirection+0x64>
 1a2:	ba 01       	movw	r22, r20
 1a4:	60 95       	com	r22
 1a6:	62 23       	and	r22, r18
 1a8:	67 bb       	out	0x17, r22	; 23
 1aa:	08 95       	ret
		}
		else if (Copy_u8Direction==OUTPUT)
 1ac:	41 30       	cpi	r20, 0x01	; 1
 1ae:	09 f0       	breq	.+2      	; 0x1b2 <MDIO_voidSetPinDirection+0x7c>
 1b0:	4a c0       	rjmp	.+148    	; 0x246 <MDIO_voidSetPinDirection+0x110>
		{
			SET_BIT(DDRB,Copy_u8Pin);
 1b2:	27 b3       	in	r18, 0x17	; 23
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	ac 01       	movw	r20, r24
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <MDIO_voidSetPinDirection+0x8a>
 1bc:	44 0f       	add	r20, r20
 1be:	55 1f       	adc	r21, r21
 1c0:	6a 95       	dec	r22
 1c2:	e2 f7       	brpl	.-8      	; 0x1bc <MDIO_voidSetPinDirection+0x86>
 1c4:	ba 01       	movw	r22, r20
 1c6:	62 2b       	or	r22, r18
 1c8:	67 bb       	out	0x17, r22	; 23
 1ca:	08 95       	ret
			/* error */
		}
		break;
		
		case DIOC :
		if (Copy_u8Direction==INPUT)
 1cc:	44 23       	and	r20, r20
 1ce:	71 f4       	brne	.+28     	; 0x1ec <MDIO_voidSetPinDirection+0xb6>
		{
			CLR_BIT(DDRC,Copy_u8Pin);
 1d0:	24 b3       	in	r18, 0x14	; 20
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	ac 01       	movw	r20, r24
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <MDIO_voidSetPinDirection+0xa8>
 1da:	44 0f       	add	r20, r20
 1dc:	55 1f       	adc	r21, r21
 1de:	6a 95       	dec	r22
 1e0:	e2 f7       	brpl	.-8      	; 0x1da <MDIO_voidSetPinDirection+0xa4>
 1e2:	ba 01       	movw	r22, r20
 1e4:	60 95       	com	r22
 1e6:	62 23       	and	r22, r18
 1e8:	64 bb       	out	0x14, r22	; 20
 1ea:	08 95       	ret
		}
		else if (Copy_u8Direction==OUTPUT)
 1ec:	41 30       	cpi	r20, 0x01	; 1
 1ee:	59 f5       	brne	.+86     	; 0x246 <MDIO_voidSetPinDirection+0x110>
		{
			SET_BIT(DDRC,Copy_u8Pin);
 1f0:	24 b3       	in	r18, 0x14	; 20
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	ac 01       	movw	r20, r24
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <MDIO_voidSetPinDirection+0xc8>
 1fa:	44 0f       	add	r20, r20
 1fc:	55 1f       	adc	r21, r21
 1fe:	6a 95       	dec	r22
 200:	e2 f7       	brpl	.-8      	; 0x1fa <MDIO_voidSetPinDirection+0xc4>
 202:	ba 01       	movw	r22, r20
 204:	62 2b       	or	r22, r18
 206:	64 bb       	out	0x14, r22	; 20
 208:	08 95       	ret
			/* error */
		}
		break;
			
		case DIOD :
		if (Copy_u8Direction==INPUT)
 20a:	44 23       	and	r20, r20
 20c:	71 f4       	brne	.+28     	; 0x22a <MDIO_voidSetPinDirection+0xf4>
		{
			CLR_BIT(DDRD,Copy_u8Pin);
 20e:	21 b3       	in	r18, 0x11	; 17
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	ac 01       	movw	r20, r24
 216:	02 c0       	rjmp	.+4      	; 0x21c <MDIO_voidSetPinDirection+0xe6>
 218:	44 0f       	add	r20, r20
 21a:	55 1f       	adc	r21, r21
 21c:	6a 95       	dec	r22
 21e:	e2 f7       	brpl	.-8      	; 0x218 <MDIO_voidSetPinDirection+0xe2>
 220:	ba 01       	movw	r22, r20
 222:	60 95       	com	r22
 224:	62 23       	and	r22, r18
 226:	61 bb       	out	0x11, r22	; 17
 228:	08 95       	ret
		}
		else if (Copy_u8Direction==OUTPUT)
 22a:	41 30       	cpi	r20, 0x01	; 1
 22c:	61 f4       	brne	.+24     	; 0x246 <MDIO_voidSetPinDirection+0x110>
		{
			SET_BIT(DDRD,Copy_u8Pin);
 22e:	21 b3       	in	r18, 0x11	; 17
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	ac 01       	movw	r20, r24
 236:	02 c0       	rjmp	.+4      	; 0x23c <MDIO_voidSetPinDirection+0x106>
 238:	44 0f       	add	r20, r20
 23a:	55 1f       	adc	r21, r21
 23c:	6a 95       	dec	r22
 23e:	e2 f7       	brpl	.-8      	; 0x238 <MDIO_voidSetPinDirection+0x102>
 240:	ba 01       	movw	r22, r20
 242:	62 2b       	or	r22, r18
 244:	61 bb       	out	0x11, r22	; 17
 246:	08 95       	ret

00000248 <MDIO_voidSetPortDirection>:
	}
}
void MDIO_voidSetPortDirection(u8 Copy_u8Port,u8 Copy_u8Direction)
{

  switch(Copy_u8Port)
 248:	81 30       	cpi	r24, 0x01	; 1
 24a:	81 f0       	breq	.+32     	; 0x26c <MDIO_voidSetPortDirection+0x24>
 24c:	81 30       	cpi	r24, 0x01	; 1
 24e:	28 f0       	brcs	.+10     	; 0x25a <MDIO_voidSetPortDirection+0x12>
 250:	82 30       	cpi	r24, 0x02	; 2
 252:	a9 f0       	breq	.+42     	; 0x27e <MDIO_voidSetPortDirection+0x36>
 254:	83 30       	cpi	r24, 0x03	; 3
 256:	21 f5       	brne	.+72     	; 0x2a0 <MDIO_voidSetPortDirection+0x58>
 258:	1b c0       	rjmp	.+54     	; 0x290 <MDIO_voidSetPortDirection+0x48>
  {
	  case DIOA :
	  if (Copy_u8Direction==INPUT)
 25a:	66 23       	and	r22, r22
 25c:	11 f4       	brne	.+4      	; 0x262 <MDIO_voidSetPortDirection+0x1a>
	  {
		  DDRA=0x00;
 25e:	1a ba       	out	0x1a, r1	; 26
 260:	08 95       	ret
	  }
	  else if (Copy_u8Direction==OUTPUT)
 262:	61 30       	cpi	r22, 0x01	; 1
 264:	e9 f4       	brne	.+58     	; 0x2a0 <MDIO_voidSetPortDirection+0x58>
	  {
		  DDRA=0xFF;
 266:	8f ef       	ldi	r24, 0xFF	; 255
 268:	8a bb       	out	0x1a, r24	; 26
 26a:	08 95       	ret
	  {
	    /* error */
	  }
	  break;
	  case DIOB :
	  if (Copy_u8Direction==INPUT)
 26c:	66 23       	and	r22, r22
 26e:	11 f4       	brne	.+4      	; 0x274 <MDIO_voidSetPortDirection+0x2c>
	  {
		  DDRB=0x00;
 270:	17 ba       	out	0x17, r1	; 23
 272:	08 95       	ret
	  }
	  else if (Copy_u8Direction==OUTPUT)
 274:	61 30       	cpi	r22, 0x01	; 1
 276:	a1 f4       	brne	.+40     	; 0x2a0 <MDIO_voidSetPortDirection+0x58>
	  {
		  DDRB=0xFF;
 278:	8f ef       	ldi	r24, 0xFF	; 255
 27a:	87 bb       	out	0x17, r24	; 23
 27c:	08 95       	ret
	  {
		  /* error */
	  }
	  break;	
	  case DIOC :
	  if (Copy_u8Direction==INPUT)
 27e:	66 23       	and	r22, r22
 280:	11 f4       	brne	.+4      	; 0x286 <MDIO_voidSetPortDirection+0x3e>
	  {
		  DDRC=0x00;
 282:	14 ba       	out	0x14, r1	; 20
 284:	08 95       	ret
	  }
	  else if (Copy_u8Direction==OUTPUT)
 286:	61 30       	cpi	r22, 0x01	; 1
 288:	59 f4       	brne	.+22     	; 0x2a0 <MDIO_voidSetPortDirection+0x58>
	  {
		  DDRC=0xFF;
 28a:	8f ef       	ldi	r24, 0xFF	; 255
 28c:	84 bb       	out	0x14, r24	; 20
 28e:	08 95       	ret
	  {
		  /* error */
	  }
	  break;
	  case DIOD :
	  if (Copy_u8Direction==INPUT)
 290:	66 23       	and	r22, r22
 292:	11 f4       	brne	.+4      	; 0x298 <MDIO_voidSetPortDirection+0x50>
	  {
		  DDRD=0x00;
 294:	11 ba       	out	0x11, r1	; 17
 296:	08 95       	ret
	  }
	  else if (Copy_u8Direction==OUTPUT)
 298:	61 30       	cpi	r22, 0x01	; 1
 29a:	11 f4       	brne	.+4      	; 0x2a0 <MDIO_voidSetPortDirection+0x58>
	  {
		  DDRD=0xFF;
 29c:	8f ef       	ldi	r24, 0xFF	; 255
 29e:	81 bb       	out	0x11, r24	; 17
 2a0:	08 95       	ret

000002a2 <MDIO_voidSetPinValue>:

}

void MDIO_voidSetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)
{
    switch(Copy_u8Port)
 2a2:	81 30       	cpi	r24, 0x01	; 1
 2a4:	49 f1       	breq	.+82     	; 0x2f8 <MDIO_voidSetPinValue+0x56>
 2a6:	81 30       	cpi	r24, 0x01	; 1
 2a8:	38 f0       	brcs	.+14     	; 0x2b8 <MDIO_voidSetPinValue+0x16>
 2aa:	82 30       	cpi	r24, 0x02	; 2
 2ac:	09 f4       	brne	.+2      	; 0x2b0 <MDIO_voidSetPinValue+0xe>
 2ae:	44 c0       	rjmp	.+136    	; 0x338 <MDIO_voidSetPinValue+0x96>
 2b0:	83 30       	cpi	r24, 0x03	; 3
 2b2:	09 f0       	breq	.+2      	; 0x2b6 <MDIO_voidSetPinValue+0x14>
 2b4:	7e c0       	rjmp	.+252    	; 0x3b2 <MDIO_voidSetPinValue+0x110>
 2b6:	5f c0       	rjmp	.+190    	; 0x376 <MDIO_voidSetPinValue+0xd4>
    {
	    case DIOA :
	    if (Copy_u8Value==LOW)
 2b8:	44 23       	and	r20, r20
 2ba:	71 f4       	brne	.+28     	; 0x2d8 <MDIO_voidSetPinValue+0x36>
	    {
		    CLR_BIT(PORTA,Copy_u8Pin);
 2bc:	2b b3       	in	r18, 0x1b	; 27
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	ac 01       	movw	r20, r24
 2c4:	02 c0       	rjmp	.+4      	; 0x2ca <MDIO_voidSetPinValue+0x28>
 2c6:	44 0f       	add	r20, r20
 2c8:	55 1f       	adc	r21, r21
 2ca:	6a 95       	dec	r22
 2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <MDIO_voidSetPinValue+0x24>
 2ce:	ba 01       	movw	r22, r20
 2d0:	60 95       	com	r22
 2d2:	62 23       	and	r22, r18
 2d4:	6b bb       	out	0x1b, r22	; 27
 2d6:	08 95       	ret
	    }
	    else if (Copy_u8Value==HIGH)
 2d8:	41 30       	cpi	r20, 0x01	; 1
 2da:	09 f0       	breq	.+2      	; 0x2de <MDIO_voidSetPinValue+0x3c>
 2dc:	6a c0       	rjmp	.+212    	; 0x3b2 <MDIO_voidSetPinValue+0x110>
	    {
		    SET_BIT(PORTA,Copy_u8Pin);
 2de:	2b b3       	in	r18, 0x1b	; 27
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	ac 01       	movw	r20, r24
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <MDIO_voidSetPinValue+0x4a>
 2e8:	44 0f       	add	r20, r20
 2ea:	55 1f       	adc	r21, r21
 2ec:	6a 95       	dec	r22
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <MDIO_voidSetPinValue+0x46>
 2f0:	ba 01       	movw	r22, r20
 2f2:	62 2b       	or	r22, r18
 2f4:	6b bb       	out	0x1b, r22	; 27
 2f6:	08 95       	ret
		    /* error */
	    }
	    break;
	    
	    case DIOB :
	    if (Copy_u8Value==LOW)
 2f8:	44 23       	and	r20, r20
 2fa:	71 f4       	brne	.+28     	; 0x318 <MDIO_voidSetPinValue+0x76>
	    {
		    CLR_BIT(PORTB,Copy_u8Pin);
 2fc:	28 b3       	in	r18, 0x18	; 24
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	ac 01       	movw	r20, r24
 304:	02 c0       	rjmp	.+4      	; 0x30a <MDIO_voidSetPinValue+0x68>
 306:	44 0f       	add	r20, r20
 308:	55 1f       	adc	r21, r21
 30a:	6a 95       	dec	r22
 30c:	e2 f7       	brpl	.-8      	; 0x306 <MDIO_voidSetPinValue+0x64>
 30e:	ba 01       	movw	r22, r20
 310:	60 95       	com	r22
 312:	62 23       	and	r22, r18
 314:	68 bb       	out	0x18, r22	; 24
 316:	08 95       	ret
	    }
	    else if (Copy_u8Value==HIGH)
 318:	41 30       	cpi	r20, 0x01	; 1
 31a:	09 f0       	breq	.+2      	; 0x31e <MDIO_voidSetPinValue+0x7c>
 31c:	4a c0       	rjmp	.+148    	; 0x3b2 <MDIO_voidSetPinValue+0x110>
	    {
		    SET_BIT(PORTB,Copy_u8Pin);
 31e:	28 b3       	in	r18, 0x18	; 24
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	ac 01       	movw	r20, r24
 326:	02 c0       	rjmp	.+4      	; 0x32c <MDIO_voidSetPinValue+0x8a>
 328:	44 0f       	add	r20, r20
 32a:	55 1f       	adc	r21, r21
 32c:	6a 95       	dec	r22
 32e:	e2 f7       	brpl	.-8      	; 0x328 <MDIO_voidSetPinValue+0x86>
 330:	ba 01       	movw	r22, r20
 332:	62 2b       	or	r22, r18
 334:	68 bb       	out	0x18, r22	; 24
 336:	08 95       	ret
	    {
		    /* error */
	    }
	    break;
	    case DIOC :
	    if (Copy_u8Value==LOW)
 338:	44 23       	and	r20, r20
 33a:	71 f4       	brne	.+28     	; 0x358 <MDIO_voidSetPinValue+0xb6>
	    {
		    CLR_BIT(PORTC,Copy_u8Pin);
 33c:	25 b3       	in	r18, 0x15	; 21
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	ac 01       	movw	r20, r24
 344:	02 c0       	rjmp	.+4      	; 0x34a <MDIO_voidSetPinValue+0xa8>
 346:	44 0f       	add	r20, r20
 348:	55 1f       	adc	r21, r21
 34a:	6a 95       	dec	r22
 34c:	e2 f7       	brpl	.-8      	; 0x346 <MDIO_voidSetPinValue+0xa4>
 34e:	ba 01       	movw	r22, r20
 350:	60 95       	com	r22
 352:	62 23       	and	r22, r18
 354:	65 bb       	out	0x15, r22	; 21
 356:	08 95       	ret
	    }
	    else if (Copy_u8Value==HIGH)
 358:	41 30       	cpi	r20, 0x01	; 1
 35a:	59 f5       	brne	.+86     	; 0x3b2 <MDIO_voidSetPinValue+0x110>
	    {
		    SET_BIT(PORTC,Copy_u8Pin);
 35c:	25 b3       	in	r18, 0x15	; 21
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	ac 01       	movw	r20, r24
 364:	02 c0       	rjmp	.+4      	; 0x36a <MDIO_voidSetPinValue+0xc8>
 366:	44 0f       	add	r20, r20
 368:	55 1f       	adc	r21, r21
 36a:	6a 95       	dec	r22
 36c:	e2 f7       	brpl	.-8      	; 0x366 <MDIO_voidSetPinValue+0xc4>
 36e:	ba 01       	movw	r22, r20
 370:	62 2b       	or	r22, r18
 372:	65 bb       	out	0x15, r22	; 21
 374:	08 95       	ret
	    {
		    /* error */
	    }
	    break;
	    case DIOD :
	    if (Copy_u8Value==LOW)
 376:	44 23       	and	r20, r20
 378:	71 f4       	brne	.+28     	; 0x396 <MDIO_voidSetPinValue+0xf4>
	    {
		    CLR_BIT(PORTD,Copy_u8Pin);
 37a:	22 b3       	in	r18, 0x12	; 18
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	ac 01       	movw	r20, r24
 382:	02 c0       	rjmp	.+4      	; 0x388 <MDIO_voidSetPinValue+0xe6>
 384:	44 0f       	add	r20, r20
 386:	55 1f       	adc	r21, r21
 388:	6a 95       	dec	r22
 38a:	e2 f7       	brpl	.-8      	; 0x384 <MDIO_voidSetPinValue+0xe2>
 38c:	ba 01       	movw	r22, r20
 38e:	60 95       	com	r22
 390:	62 23       	and	r22, r18
 392:	62 bb       	out	0x12, r22	; 18
 394:	08 95       	ret
	    }
	    else if (Copy_u8Value==HIGH)
 396:	41 30       	cpi	r20, 0x01	; 1
 398:	61 f4       	brne	.+24     	; 0x3b2 <MDIO_voidSetPinValue+0x110>
	    {
		    SET_BIT(PORTD,Copy_u8Pin);
 39a:	22 b3       	in	r18, 0x12	; 18
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	ac 01       	movw	r20, r24
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <MDIO_voidSetPinValue+0x106>
 3a4:	44 0f       	add	r20, r20
 3a6:	55 1f       	adc	r21, r21
 3a8:	6a 95       	dec	r22
 3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <MDIO_voidSetPinValue+0x102>
 3ac:	ba 01       	movw	r22, r20
 3ae:	62 2b       	or	r22, r18
 3b0:	62 bb       	out	0x12, r22	; 18
 3b2:	08 95       	ret

000003b4 <MDIO_u8GetPinValue>:
    }
}
u8 MDIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin)
{
	 u8 Local_u8value=0;
	 switch(Copy_u8Port)
 3b4:	81 30       	cpi	r24, 0x01	; 1
 3b6:	89 f0       	breq	.+34     	; 0x3da <MDIO_u8GetPinValue+0x26>
 3b8:	81 30       	cpi	r24, 0x01	; 1
 3ba:	28 f0       	brcs	.+10     	; 0x3c6 <MDIO_u8GetPinValue+0x12>
 3bc:	82 30       	cpi	r24, 0x02	; 2
 3be:	b9 f0       	breq	.+46     	; 0x3ee <MDIO_u8GetPinValue+0x3a>
 3c0:	83 30       	cpi	r24, 0x03	; 3
 3c2:	49 f5       	brne	.+82     	; 0x416 <MDIO_u8GetPinValue+0x62>
 3c4:	1e c0       	rjmp	.+60     	; 0x402 <MDIO_u8GetPinValue+0x4e>
	 {
		 case DIOA :
		 Local_u8value=GET_BIT(PINA,Copy_u8Pin);
 3c6:	29 b3       	in	r18, 0x19	; 25
 3c8:	30 e0       	ldi	r19, 0x00	; 0
 3ca:	c9 01       	movw	r24, r18
 3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <MDIO_u8GetPinValue+0x1e>
 3ce:	95 95       	asr	r25
 3d0:	87 95       	ror	r24
 3d2:	6a 95       	dec	r22
 3d4:	e2 f7       	brpl	.-8      	; 0x3ce <MDIO_u8GetPinValue+0x1a>
 3d6:	81 70       	andi	r24, 0x01	; 1
		 break;
 3d8:	08 95       	ret
		 case DIOB :
		 Local_u8value=GET_BIT(PINB,Copy_u8Pin);
 3da:	26 b3       	in	r18, 0x16	; 22
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	c9 01       	movw	r24, r18
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <MDIO_u8GetPinValue+0x32>
 3e2:	95 95       	asr	r25
 3e4:	87 95       	ror	r24
 3e6:	6a 95       	dec	r22
 3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <MDIO_u8GetPinValue+0x2e>
 3ea:	81 70       	andi	r24, 0x01	; 1
		 break;
 3ec:	08 95       	ret
		 case DIOC :
		 Local_u8value=GET_BIT(PINC,Copy_u8Pin);
 3ee:	23 b3       	in	r18, 0x13	; 19
 3f0:	30 e0       	ldi	r19, 0x00	; 0
 3f2:	c9 01       	movw	r24, r18
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <MDIO_u8GetPinValue+0x46>
 3f6:	95 95       	asr	r25
 3f8:	87 95       	ror	r24
 3fa:	6a 95       	dec	r22
 3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <MDIO_u8GetPinValue+0x42>
 3fe:	81 70       	andi	r24, 0x01	; 1
		 break;
 400:	08 95       	ret
		 case DIOD :
		 Local_u8value=GET_BIT(PIND,Copy_u8Pin);
 402:	20 b3       	in	r18, 0x10	; 16
 404:	30 e0       	ldi	r19, 0x00	; 0
 406:	c9 01       	movw	r24, r18
 408:	02 c0       	rjmp	.+4      	; 0x40e <MDIO_u8GetPinValue+0x5a>
 40a:	95 95       	asr	r25
 40c:	87 95       	ror	r24
 40e:	6a 95       	dec	r22
 410:	e2 f7       	brpl	.-8      	; 0x40a <MDIO_u8GetPinValue+0x56>
 412:	81 70       	andi	r24, 0x01	; 1
		 break;		 		 
 414:	08 95       	ret
	    
    }
}
u8 MDIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin)
{
	 u8 Local_u8value=0;
 416:	80 e0       	ldi	r24, 0x00	; 0
		 break;		 		 
		 default: break;
		 
	 }
	 return Local_u8value;
}
 418:	08 95       	ret

0000041a <MDIO_voidSetPortValue>:
void MDIO_voidSetPortValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
	switch(Copy_u8Port)
 41a:	81 30       	cpi	r24, 0x01	; 1
 41c:	81 f0       	breq	.+32     	; 0x43e <MDIO_voidSetPortValue+0x24>
 41e:	81 30       	cpi	r24, 0x01	; 1
 420:	28 f0       	brcs	.+10     	; 0x42c <MDIO_voidSetPortValue+0x12>
 422:	82 30       	cpi	r24, 0x02	; 2
 424:	a9 f0       	breq	.+42     	; 0x450 <MDIO_voidSetPortValue+0x36>
 426:	83 30       	cpi	r24, 0x03	; 3
 428:	21 f5       	brne	.+72     	; 0x472 <MDIO_voidSetPortValue+0x58>
 42a:	1b c0       	rjmp	.+54     	; 0x462 <MDIO_voidSetPortValue+0x48>
	{
		case DIOA :
		if (Copy_u8Value==HIGH)
 42c:	61 30       	cpi	r22, 0x01	; 1
 42e:	19 f4       	brne	.+6      	; 0x436 <MDIO_voidSetPortValue+0x1c>
		{
			PORTA=0xFF;
 430:	8f ef       	ldi	r24, 0xFF	; 255
 432:	8b bb       	out	0x1b, r24	; 27
 434:	08 95       	ret
		}
		else if(Copy_u8Value==LOW)
 436:	66 23       	and	r22, r22
 438:	e1 f4       	brne	.+56     	; 0x472 <MDIO_voidSetPortValue+0x58>
		{
			PORTA=0x00;
 43a:	1b ba       	out	0x1b, r1	; 27
 43c:	08 95       	ret
		}
		break;
		case DIOB :
		if (Copy_u8Value==HIGH)
 43e:	61 30       	cpi	r22, 0x01	; 1
 440:	19 f4       	brne	.+6      	; 0x448 <MDIO_voidSetPortValue+0x2e>
		{
			PORTB=0xFF;
 442:	8f ef       	ldi	r24, 0xFF	; 255
 444:	88 bb       	out	0x18, r24	; 24
 446:	08 95       	ret
		}
		else if(Copy_u8Value==LOW)
 448:	66 23       	and	r22, r22
 44a:	99 f4       	brne	.+38     	; 0x472 <MDIO_voidSetPortValue+0x58>
		{
			PORTB=0x00;
 44c:	18 ba       	out	0x18, r1	; 24
 44e:	08 95       	ret
		}
		break;	
		case DIOC :
		if (Copy_u8Value==HIGH)
 450:	61 30       	cpi	r22, 0x01	; 1
 452:	19 f4       	brne	.+6      	; 0x45a <MDIO_voidSetPortValue+0x40>
		{
			PORTC=0xFF;
 454:	8f ef       	ldi	r24, 0xFF	; 255
 456:	85 bb       	out	0x15, r24	; 21
 458:	08 95       	ret
		}
		else if(Copy_u8Value==LOW)
 45a:	66 23       	and	r22, r22
 45c:	51 f4       	brne	.+20     	; 0x472 <MDIO_voidSetPortValue+0x58>
		{
			PORTC=0x00;
 45e:	15 ba       	out	0x15, r1	; 21
 460:	08 95       	ret
		}
		break;
		case DIOD :
		if (Copy_u8Value==HIGH)
 462:	61 30       	cpi	r22, 0x01	; 1
 464:	19 f4       	brne	.+6      	; 0x46c <MDIO_voidSetPortValue+0x52>
		{
			PORTD=0xFF;
 466:	8f ef       	ldi	r24, 0xFF	; 255
 468:	82 bb       	out	0x12, r24	; 18
 46a:	08 95       	ret
		}
		else if(Copy_u8Value==LOW)
 46c:	66 23       	and	r22, r22
 46e:	09 f4       	brne	.+2      	; 0x472 <MDIO_voidSetPortValue+0x58>
		{
			PORTD=0x00;
 470:	12 ba       	out	0x12, r1	; 18
 472:	08 95       	ret

00000474 <MDIO_voidTogglePin>:
	}
}

void MDIO_voidTogglePin(u8 Copy_u8Port,u8 Copy_u8Pin)
{
	switch(Copy_u8Port)
 474:	81 30       	cpi	r24, 0x01	; 1
 476:	a1 f0       	breq	.+40     	; 0x4a0 <MDIO_voidTogglePin+0x2c>
 478:	81 30       	cpi	r24, 0x01	; 1
 47a:	28 f0       	brcs	.+10     	; 0x486 <MDIO_voidTogglePin+0x12>
 47c:	82 30       	cpi	r24, 0x02	; 2
 47e:	e9 f0       	breq	.+58     	; 0x4ba <MDIO_voidTogglePin+0x46>
 480:	83 30       	cpi	r24, 0x03	; 3
 482:	a1 f5       	brne	.+104    	; 0x4ec <MDIO_voidTogglePin+0x78>
 484:	27 c0       	rjmp	.+78     	; 0x4d4 <MDIO_voidTogglePin+0x60>
	{
		
		case DIOA :
		TOG_BIT(PORTA,Copy_u8Pin);
 486:	2b b3       	in	r18, 0x1b	; 27
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	ac 01       	movw	r20, r24
 48e:	02 c0       	rjmp	.+4      	; 0x494 <MDIO_voidTogglePin+0x20>
 490:	44 0f       	add	r20, r20
 492:	55 1f       	adc	r21, r21
 494:	6a 95       	dec	r22
 496:	e2 f7       	brpl	.-8      	; 0x490 <MDIO_voidTogglePin+0x1c>
 498:	ba 01       	movw	r22, r20
 49a:	62 27       	eor	r22, r18
 49c:	6b bb       	out	0x1b, r22	; 27
		break;
 49e:	08 95       	ret
		case DIOB :
		TOG_BIT(PORTB,Copy_u8Pin);
 4a0:	28 b3       	in	r18, 0x18	; 24
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	ac 01       	movw	r20, r24
 4a8:	02 c0       	rjmp	.+4      	; 0x4ae <MDIO_voidTogglePin+0x3a>
 4aa:	44 0f       	add	r20, r20
 4ac:	55 1f       	adc	r21, r21
 4ae:	6a 95       	dec	r22
 4b0:	e2 f7       	brpl	.-8      	; 0x4aa <MDIO_voidTogglePin+0x36>
 4b2:	ba 01       	movw	r22, r20
 4b4:	62 27       	eor	r22, r18
 4b6:	68 bb       	out	0x18, r22	; 24
		break;
 4b8:	08 95       	ret
		case DIOC :
		TOG_BIT(PORTC,Copy_u8Pin);
 4ba:	25 b3       	in	r18, 0x15	; 21
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	ac 01       	movw	r20, r24
 4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <MDIO_voidTogglePin+0x54>
 4c4:	44 0f       	add	r20, r20
 4c6:	55 1f       	adc	r21, r21
 4c8:	6a 95       	dec	r22
 4ca:	e2 f7       	brpl	.-8      	; 0x4c4 <MDIO_voidTogglePin+0x50>
 4cc:	ba 01       	movw	r22, r20
 4ce:	62 27       	eor	r22, r18
 4d0:	65 bb       	out	0x15, r22	; 21
		break;
 4d2:	08 95       	ret
		case DIOD :
		TOG_BIT(PORTD,Copy_u8Pin);
 4d4:	22 b3       	in	r18, 0x12	; 18
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	ac 01       	movw	r20, r24
 4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <MDIO_voidTogglePin+0x6e>
 4de:	44 0f       	add	r20, r20
 4e0:	55 1f       	adc	r21, r21
 4e2:	6a 95       	dec	r22
 4e4:	e2 f7       	brpl	.-8      	; 0x4de <MDIO_voidTogglePin+0x6a>
 4e6:	ba 01       	movw	r22, r20
 4e8:	62 27       	eor	r22, r18
 4ea:	62 bb       	out	0x12, r22	; 18
 4ec:	08 95       	ret

000004ee <MDIO_voidTogglePort>:
	}
}

void MDIO_voidTogglePort(u8 Copy_u8Port)
{
	    switch(Copy_u8Port)
 4ee:	81 30       	cpi	r24, 0x01	; 1
 4f0:	59 f0       	breq	.+22     	; 0x508 <MDIO_voidTogglePort+0x1a>
 4f2:	81 30       	cpi	r24, 0x01	; 1
 4f4:	28 f0       	brcs	.+10     	; 0x500 <MDIO_voidTogglePort+0x12>
 4f6:	82 30       	cpi	r24, 0x02	; 2
 4f8:	59 f0       	breq	.+22     	; 0x510 <MDIO_voidTogglePort+0x22>
 4fa:	83 30       	cpi	r24, 0x03	; 3
 4fc:	81 f4       	brne	.+32     	; 0x51e <MDIO_voidTogglePort+0x30>
 4fe:	0c c0       	rjmp	.+24     	; 0x518 <MDIO_voidTogglePort+0x2a>
		{
		case DIOA :
		PORTA=~PORTA;
 500:	8b b3       	in	r24, 0x1b	; 27
 502:	80 95       	com	r24
 504:	8b bb       	out	0x1b, r24	; 27
		break;
 506:	08 95       	ret
		case DIOB :
		PORTB=~PORTB;
 508:	88 b3       	in	r24, 0x18	; 24
 50a:	80 95       	com	r24
 50c:	88 bb       	out	0x18, r24	; 24
		break;
 50e:	08 95       	ret
		case DIOC :
		PORTC=~PORTC;
 510:	85 b3       	in	r24, 0x15	; 21
 512:	80 95       	com	r24
 514:	85 bb       	out	0x15, r24	; 21
		break;
 516:	08 95       	ret
		case DIOD :
		PORTD=~PORTD;
 518:	82 b3       	in	r24, 0x12	; 18
 51a:	80 95       	com	r24
 51c:	82 bb       	out	0x12, r24	; 18
 51e:	08 95       	ret

00000520 <main>:
#include "DIO_interface.h"
#include "LED_interface.h"

int main(void)
{
	HLED_voidInit(DIOD,PIN3);
 520:	83 e0       	ldi	r24, 0x03	; 3
 522:	63 e0       	ldi	r22, 0x03	; 3
 524:	0e 94 a9 02 	call	0x552	; 0x552 <HLED_voidInit>
    while(1)
    {
         HLED_voidLED_ON(DIOD,PIN3);
 528:	83 e0       	ldi	r24, 0x03	; 3
 52a:	63 e0       	ldi	r22, 0x03	; 3
 52c:	0e 94 ad 02 	call	0x55a	; 0x55a <HLED_voidLED_ON>
		 Delay_ms(10000);
 530:	60 e0       	ldi	r22, 0x00	; 0
 532:	70 e4       	ldi	r23, 0x40	; 64
 534:	8c e1       	ldi	r24, 0x1C	; 28
 536:	96 e4       	ldi	r25, 0x46	; 70
 538:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
		 HLED_voidLED_OFF(DIOD,PIN3);
 53c:	83 e0       	ldi	r24, 0x03	; 3
 53e:	63 e0       	ldi	r22, 0x03	; 3
 540:	0e 94 b1 02 	call	0x562	; 0x562 <HLED_voidLED_OFF>
		 Delay_ms(10000);
 544:	60 e0       	ldi	r22, 0x00	; 0
 546:	70 e4       	ldi	r23, 0x40	; 64
 548:	8c e1       	ldi	r24, 0x1C	; 28
 54a:	96 e4       	ldi	r25, 0x46	; 70
 54c:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
 550:	eb cf       	rjmp	.-42     	; 0x528 <main+0x8>

00000552 <HLED_voidInit>:
#include "DIO_interface.h"


void HLED_voidInit(u8 Copy_u8Port,u8 Copy_u8pin)
{
	MDIO_voidSetPinDirection(Copy_u8Port,Copy_u8pin,OUTPUT);
 552:	41 e0       	ldi	r20, 0x01	; 1
 554:	0e 94 9b 00 	call	0x136	; 0x136 <MDIO_voidSetPinDirection>
}
 558:	08 95       	ret

0000055a <HLED_voidLED_ON>:
void HLED_voidLED_ON(u8 Copy_u8Port,u8 Copy_u8pin)
{
	MDIO_voidSetPinValue(Copy_u8Port,Copy_u8pin,HIGH);
 55a:	41 e0       	ldi	r20, 0x01	; 1
 55c:	0e 94 51 01 	call	0x2a2	; 0x2a2 <MDIO_voidSetPinValue>
}
 560:	08 95       	ret

00000562 <HLED_voidLED_OFF>:
void HLED_voidLED_OFF(u8 Copy_u8Port,u8 Copy_u8pin)
{
	MDIO_voidSetPinValue(Copy_u8Port,Copy_u8pin,LOW);
 562:	40 e0       	ldi	r20, 0x00	; 0
 564:	0e 94 51 01 	call	0x2a2	; 0x2a2 <MDIO_voidSetPinValue>
}
 568:	08 95       	ret

0000056a <HLED_u8GetLEDstatus>:
u8 HLED_u8GetLEDstatus(u8 Copy_u8Port,u8 Copy_u8pin)
{
	return GET_BIT(Copy_u8Port,Copy_u8pin);
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	02 c0       	rjmp	.+4      	; 0x572 <HLED_u8GetLEDstatus+0x8>
 56e:	95 95       	asr	r25
 570:	87 95       	ror	r24
 572:	6a 95       	dec	r22
 574:	e2 f7       	brpl	.-8      	; 0x56e <HLED_u8GetLEDstatus+0x4>
}
 576:	81 70       	andi	r24, 0x01	; 1
 578:	08 95       	ret

0000057a <HLED_voidToggleLED>:
void HLED_voidToggleLED(u8 Copy_u8Port,u8 Copy_u8pin)
{
	TOG_BIT(Copy_u8Port,Copy_u8pin);
 57a:	08 95       	ret

0000057c <__divsf3>:
 57c:	0c d0       	rcall	.+24     	; 0x596 <__divsf3x>
 57e:	a9 c0       	rjmp	.+338    	; 0x6d2 <__fp_round>
 580:	a1 d0       	rcall	.+322    	; 0x6c4 <__fp_pscB>
 582:	40 f0       	brcs	.+16     	; 0x594 <__divsf3+0x18>
 584:	98 d0       	rcall	.+304    	; 0x6b6 <__fp_pscA>
 586:	30 f0       	brcs	.+12     	; 0x594 <__divsf3+0x18>
 588:	21 f4       	brne	.+8      	; 0x592 <__divsf3+0x16>
 58a:	5f 3f       	cpi	r21, 0xFF	; 255
 58c:	19 f0       	breq	.+6      	; 0x594 <__divsf3+0x18>
 58e:	8a c0       	rjmp	.+276    	; 0x6a4 <__fp_inf>
 590:	51 11       	cpse	r21, r1
 592:	d3 c0       	rjmp	.+422    	; 0x73a <__fp_szero>
 594:	8d c0       	rjmp	.+282    	; 0x6b0 <__fp_nan>

00000596 <__divsf3x>:
 596:	ae d0       	rcall	.+348    	; 0x6f4 <__fp_split3>
 598:	98 f3       	brcs	.-26     	; 0x580 <__divsf3+0x4>

0000059a <__divsf3_pse>:
 59a:	99 23       	and	r25, r25
 59c:	c9 f3       	breq	.-14     	; 0x590 <__divsf3+0x14>
 59e:	55 23       	and	r21, r21
 5a0:	b1 f3       	breq	.-20     	; 0x58e <__divsf3+0x12>
 5a2:	95 1b       	sub	r25, r21
 5a4:	55 0b       	sbc	r21, r21
 5a6:	bb 27       	eor	r27, r27
 5a8:	aa 27       	eor	r26, r26
 5aa:	62 17       	cp	r22, r18
 5ac:	73 07       	cpc	r23, r19
 5ae:	84 07       	cpc	r24, r20
 5b0:	38 f0       	brcs	.+14     	; 0x5c0 <__divsf3_pse+0x26>
 5b2:	9f 5f       	subi	r25, 0xFF	; 255
 5b4:	5f 4f       	sbci	r21, 0xFF	; 255
 5b6:	22 0f       	add	r18, r18
 5b8:	33 1f       	adc	r19, r19
 5ba:	44 1f       	adc	r20, r20
 5bc:	aa 1f       	adc	r26, r26
 5be:	a9 f3       	breq	.-22     	; 0x5aa <__divsf3_pse+0x10>
 5c0:	33 d0       	rcall	.+102    	; 0x628 <__divsf3_pse+0x8e>
 5c2:	0e 2e       	mov	r0, r30
 5c4:	3a f0       	brmi	.+14     	; 0x5d4 <__divsf3_pse+0x3a>
 5c6:	e0 e8       	ldi	r30, 0x80	; 128
 5c8:	30 d0       	rcall	.+96     	; 0x62a <__divsf3_pse+0x90>
 5ca:	91 50       	subi	r25, 0x01	; 1
 5cc:	50 40       	sbci	r21, 0x00	; 0
 5ce:	e6 95       	lsr	r30
 5d0:	00 1c       	adc	r0, r0
 5d2:	ca f7       	brpl	.-14     	; 0x5c6 <__divsf3_pse+0x2c>
 5d4:	29 d0       	rcall	.+82     	; 0x628 <__divsf3_pse+0x8e>
 5d6:	fe 2f       	mov	r31, r30
 5d8:	27 d0       	rcall	.+78     	; 0x628 <__divsf3_pse+0x8e>
 5da:	66 0f       	add	r22, r22
 5dc:	77 1f       	adc	r23, r23
 5de:	88 1f       	adc	r24, r24
 5e0:	bb 1f       	adc	r27, r27
 5e2:	26 17       	cp	r18, r22
 5e4:	37 07       	cpc	r19, r23
 5e6:	48 07       	cpc	r20, r24
 5e8:	ab 07       	cpc	r26, r27
 5ea:	b0 e8       	ldi	r27, 0x80	; 128
 5ec:	09 f0       	breq	.+2      	; 0x5f0 <__divsf3_pse+0x56>
 5ee:	bb 0b       	sbc	r27, r27
 5f0:	80 2d       	mov	r24, r0
 5f2:	bf 01       	movw	r22, r30
 5f4:	ff 27       	eor	r31, r31
 5f6:	93 58       	subi	r25, 0x83	; 131
 5f8:	5f 4f       	sbci	r21, 0xFF	; 255
 5fa:	2a f0       	brmi	.+10     	; 0x606 <__divsf3_pse+0x6c>
 5fc:	9e 3f       	cpi	r25, 0xFE	; 254
 5fe:	51 05       	cpc	r21, r1
 600:	68 f0       	brcs	.+26     	; 0x61c <__divsf3_pse+0x82>
 602:	50 c0       	rjmp	.+160    	; 0x6a4 <__fp_inf>
 604:	9a c0       	rjmp	.+308    	; 0x73a <__fp_szero>
 606:	5f 3f       	cpi	r21, 0xFF	; 255
 608:	ec f3       	brlt	.-6      	; 0x604 <__divsf3_pse+0x6a>
 60a:	98 3e       	cpi	r25, 0xE8	; 232
 60c:	dc f3       	brlt	.-10     	; 0x604 <__divsf3_pse+0x6a>
 60e:	86 95       	lsr	r24
 610:	77 95       	ror	r23
 612:	67 95       	ror	r22
 614:	b7 95       	ror	r27
 616:	f7 95       	ror	r31
 618:	9f 5f       	subi	r25, 0xFF	; 255
 61a:	c9 f7       	brne	.-14     	; 0x60e <__divsf3_pse+0x74>
 61c:	88 0f       	add	r24, r24
 61e:	91 1d       	adc	r25, r1
 620:	96 95       	lsr	r25
 622:	87 95       	ror	r24
 624:	97 f9       	bld	r25, 7
 626:	08 95       	ret
 628:	e1 e0       	ldi	r30, 0x01	; 1
 62a:	66 0f       	add	r22, r22
 62c:	77 1f       	adc	r23, r23
 62e:	88 1f       	adc	r24, r24
 630:	bb 1f       	adc	r27, r27
 632:	62 17       	cp	r22, r18
 634:	73 07       	cpc	r23, r19
 636:	84 07       	cpc	r24, r20
 638:	ba 07       	cpc	r27, r26
 63a:	20 f0       	brcs	.+8      	; 0x644 <__divsf3_pse+0xaa>
 63c:	62 1b       	sub	r22, r18
 63e:	73 0b       	sbc	r23, r19
 640:	84 0b       	sbc	r24, r20
 642:	ba 0b       	sbc	r27, r26
 644:	ee 1f       	adc	r30, r30
 646:	88 f7       	brcc	.-30     	; 0x62a <__divsf3_pse+0x90>
 648:	e0 95       	com	r30
 64a:	08 95       	ret

0000064c <__fixunssfsi>:
 64c:	5b d0       	rcall	.+182    	; 0x704 <__fp_splitA>
 64e:	88 f0       	brcs	.+34     	; 0x672 <__fixunssfsi+0x26>
 650:	9f 57       	subi	r25, 0x7F	; 127
 652:	90 f0       	brcs	.+36     	; 0x678 <__fixunssfsi+0x2c>
 654:	b9 2f       	mov	r27, r25
 656:	99 27       	eor	r25, r25
 658:	b7 51       	subi	r27, 0x17	; 23
 65a:	a0 f0       	brcs	.+40     	; 0x684 <__fixunssfsi+0x38>
 65c:	d1 f0       	breq	.+52     	; 0x692 <__fixunssfsi+0x46>
 65e:	66 0f       	add	r22, r22
 660:	77 1f       	adc	r23, r23
 662:	88 1f       	adc	r24, r24
 664:	99 1f       	adc	r25, r25
 666:	1a f0       	brmi	.+6      	; 0x66e <__fixunssfsi+0x22>
 668:	ba 95       	dec	r27
 66a:	c9 f7       	brne	.-14     	; 0x65e <__fixunssfsi+0x12>
 66c:	12 c0       	rjmp	.+36     	; 0x692 <__fixunssfsi+0x46>
 66e:	b1 30       	cpi	r27, 0x01	; 1
 670:	81 f0       	breq	.+32     	; 0x692 <__fixunssfsi+0x46>
 672:	62 d0       	rcall	.+196    	; 0x738 <__fp_zero>
 674:	b1 e0       	ldi	r27, 0x01	; 1
 676:	08 95       	ret
 678:	5f c0       	rjmp	.+190    	; 0x738 <__fp_zero>
 67a:	67 2f       	mov	r22, r23
 67c:	78 2f       	mov	r23, r24
 67e:	88 27       	eor	r24, r24
 680:	b8 5f       	subi	r27, 0xF8	; 248
 682:	39 f0       	breq	.+14     	; 0x692 <__fixunssfsi+0x46>
 684:	b9 3f       	cpi	r27, 0xF9	; 249
 686:	cc f3       	brlt	.-14     	; 0x67a <__fixunssfsi+0x2e>
 688:	86 95       	lsr	r24
 68a:	77 95       	ror	r23
 68c:	67 95       	ror	r22
 68e:	b3 95       	inc	r27
 690:	d9 f7       	brne	.-10     	; 0x688 <__fixunssfsi+0x3c>
 692:	3e f4       	brtc	.+14     	; 0x6a2 <__fixunssfsi+0x56>
 694:	90 95       	com	r25
 696:	80 95       	com	r24
 698:	70 95       	com	r23
 69a:	61 95       	neg	r22
 69c:	7f 4f       	sbci	r23, 0xFF	; 255
 69e:	8f 4f       	sbci	r24, 0xFF	; 255
 6a0:	9f 4f       	sbci	r25, 0xFF	; 255
 6a2:	08 95       	ret

000006a4 <__fp_inf>:
 6a4:	97 f9       	bld	r25, 7
 6a6:	9f 67       	ori	r25, 0x7F	; 127
 6a8:	80 e8       	ldi	r24, 0x80	; 128
 6aa:	70 e0       	ldi	r23, 0x00	; 0
 6ac:	60 e0       	ldi	r22, 0x00	; 0
 6ae:	08 95       	ret

000006b0 <__fp_nan>:
 6b0:	9f ef       	ldi	r25, 0xFF	; 255
 6b2:	80 ec       	ldi	r24, 0xC0	; 192
 6b4:	08 95       	ret

000006b6 <__fp_pscA>:
 6b6:	00 24       	eor	r0, r0
 6b8:	0a 94       	dec	r0
 6ba:	16 16       	cp	r1, r22
 6bc:	17 06       	cpc	r1, r23
 6be:	18 06       	cpc	r1, r24
 6c0:	09 06       	cpc	r0, r25
 6c2:	08 95       	ret

000006c4 <__fp_pscB>:
 6c4:	00 24       	eor	r0, r0
 6c6:	0a 94       	dec	r0
 6c8:	12 16       	cp	r1, r18
 6ca:	13 06       	cpc	r1, r19
 6cc:	14 06       	cpc	r1, r20
 6ce:	05 06       	cpc	r0, r21
 6d0:	08 95       	ret

000006d2 <__fp_round>:
 6d2:	09 2e       	mov	r0, r25
 6d4:	03 94       	inc	r0
 6d6:	00 0c       	add	r0, r0
 6d8:	11 f4       	brne	.+4      	; 0x6de <__fp_round+0xc>
 6da:	88 23       	and	r24, r24
 6dc:	52 f0       	brmi	.+20     	; 0x6f2 <__fp_round+0x20>
 6de:	bb 0f       	add	r27, r27
 6e0:	40 f4       	brcc	.+16     	; 0x6f2 <__fp_round+0x20>
 6e2:	bf 2b       	or	r27, r31
 6e4:	11 f4       	brne	.+4      	; 0x6ea <__fp_round+0x18>
 6e6:	60 ff       	sbrs	r22, 0
 6e8:	04 c0       	rjmp	.+8      	; 0x6f2 <__fp_round+0x20>
 6ea:	6f 5f       	subi	r22, 0xFF	; 255
 6ec:	7f 4f       	sbci	r23, 0xFF	; 255
 6ee:	8f 4f       	sbci	r24, 0xFF	; 255
 6f0:	9f 4f       	sbci	r25, 0xFF	; 255
 6f2:	08 95       	ret

000006f4 <__fp_split3>:
 6f4:	57 fd       	sbrc	r21, 7
 6f6:	90 58       	subi	r25, 0x80	; 128
 6f8:	44 0f       	add	r20, r20
 6fa:	55 1f       	adc	r21, r21
 6fc:	59 f0       	breq	.+22     	; 0x714 <__fp_splitA+0x10>
 6fe:	5f 3f       	cpi	r21, 0xFF	; 255
 700:	71 f0       	breq	.+28     	; 0x71e <__fp_splitA+0x1a>
 702:	47 95       	ror	r20

00000704 <__fp_splitA>:
 704:	88 0f       	add	r24, r24
 706:	97 fb       	bst	r25, 7
 708:	99 1f       	adc	r25, r25
 70a:	61 f0       	breq	.+24     	; 0x724 <__fp_splitA+0x20>
 70c:	9f 3f       	cpi	r25, 0xFF	; 255
 70e:	79 f0       	breq	.+30     	; 0x72e <__fp_splitA+0x2a>
 710:	87 95       	ror	r24
 712:	08 95       	ret
 714:	12 16       	cp	r1, r18
 716:	13 06       	cpc	r1, r19
 718:	14 06       	cpc	r1, r20
 71a:	55 1f       	adc	r21, r21
 71c:	f2 cf       	rjmp	.-28     	; 0x702 <__fp_split3+0xe>
 71e:	46 95       	lsr	r20
 720:	f1 df       	rcall	.-30     	; 0x704 <__fp_splitA>
 722:	08 c0       	rjmp	.+16     	; 0x734 <__fp_splitA+0x30>
 724:	16 16       	cp	r1, r22
 726:	17 06       	cpc	r1, r23
 728:	18 06       	cpc	r1, r24
 72a:	99 1f       	adc	r25, r25
 72c:	f1 cf       	rjmp	.-30     	; 0x710 <__fp_splitA+0xc>
 72e:	86 95       	lsr	r24
 730:	71 05       	cpc	r23, r1
 732:	61 05       	cpc	r22, r1
 734:	08 94       	sec
 736:	08 95       	ret

00000738 <__fp_zero>:
 738:	e8 94       	clt

0000073a <__fp_szero>:
 73a:	bb 27       	eor	r27, r27
 73c:	66 27       	eor	r22, r22
 73e:	77 27       	eor	r23, r23
 740:	cb 01       	movw	r24, r22
 742:	97 f9       	bld	r25, 7
 744:	08 95       	ret

00000746 <__mulsf3>:
 746:	0b d0       	rcall	.+22     	; 0x75e <__mulsf3x>
 748:	c4 cf       	rjmp	.-120    	; 0x6d2 <__fp_round>
 74a:	b5 df       	rcall	.-150    	; 0x6b6 <__fp_pscA>
 74c:	28 f0       	brcs	.+10     	; 0x758 <__mulsf3+0x12>
 74e:	ba df       	rcall	.-140    	; 0x6c4 <__fp_pscB>
 750:	18 f0       	brcs	.+6      	; 0x758 <__mulsf3+0x12>
 752:	95 23       	and	r25, r21
 754:	09 f0       	breq	.+2      	; 0x758 <__mulsf3+0x12>
 756:	a6 cf       	rjmp	.-180    	; 0x6a4 <__fp_inf>
 758:	ab cf       	rjmp	.-170    	; 0x6b0 <__fp_nan>
 75a:	11 24       	eor	r1, r1
 75c:	ee cf       	rjmp	.-36     	; 0x73a <__fp_szero>

0000075e <__mulsf3x>:
 75e:	ca df       	rcall	.-108    	; 0x6f4 <__fp_split3>
 760:	a0 f3       	brcs	.-24     	; 0x74a <__mulsf3+0x4>

00000762 <__mulsf3_pse>:
 762:	95 9f       	mul	r25, r21
 764:	d1 f3       	breq	.-12     	; 0x75a <__mulsf3+0x14>
 766:	95 0f       	add	r25, r21
 768:	50 e0       	ldi	r21, 0x00	; 0
 76a:	55 1f       	adc	r21, r21
 76c:	62 9f       	mul	r22, r18
 76e:	f0 01       	movw	r30, r0
 770:	72 9f       	mul	r23, r18
 772:	bb 27       	eor	r27, r27
 774:	f0 0d       	add	r31, r0
 776:	b1 1d       	adc	r27, r1
 778:	63 9f       	mul	r22, r19
 77a:	aa 27       	eor	r26, r26
 77c:	f0 0d       	add	r31, r0
 77e:	b1 1d       	adc	r27, r1
 780:	aa 1f       	adc	r26, r26
 782:	64 9f       	mul	r22, r20
 784:	66 27       	eor	r22, r22
 786:	b0 0d       	add	r27, r0
 788:	a1 1d       	adc	r26, r1
 78a:	66 1f       	adc	r22, r22
 78c:	82 9f       	mul	r24, r18
 78e:	22 27       	eor	r18, r18
 790:	b0 0d       	add	r27, r0
 792:	a1 1d       	adc	r26, r1
 794:	62 1f       	adc	r22, r18
 796:	73 9f       	mul	r23, r19
 798:	b0 0d       	add	r27, r0
 79a:	a1 1d       	adc	r26, r1
 79c:	62 1f       	adc	r22, r18
 79e:	83 9f       	mul	r24, r19
 7a0:	a0 0d       	add	r26, r0
 7a2:	61 1d       	adc	r22, r1
 7a4:	22 1f       	adc	r18, r18
 7a6:	74 9f       	mul	r23, r20
 7a8:	33 27       	eor	r19, r19
 7aa:	a0 0d       	add	r26, r0
 7ac:	61 1d       	adc	r22, r1
 7ae:	23 1f       	adc	r18, r19
 7b0:	84 9f       	mul	r24, r20
 7b2:	60 0d       	add	r22, r0
 7b4:	21 1d       	adc	r18, r1
 7b6:	82 2f       	mov	r24, r18
 7b8:	76 2f       	mov	r23, r22
 7ba:	6a 2f       	mov	r22, r26
 7bc:	11 24       	eor	r1, r1
 7be:	9f 57       	subi	r25, 0x7F	; 127
 7c0:	50 40       	sbci	r21, 0x00	; 0
 7c2:	8a f0       	brmi	.+34     	; 0x7e6 <__mulsf3_pse+0x84>
 7c4:	e1 f0       	breq	.+56     	; 0x7fe <__mulsf3_pse+0x9c>
 7c6:	88 23       	and	r24, r24
 7c8:	4a f0       	brmi	.+18     	; 0x7dc <__mulsf3_pse+0x7a>
 7ca:	ee 0f       	add	r30, r30
 7cc:	ff 1f       	adc	r31, r31
 7ce:	bb 1f       	adc	r27, r27
 7d0:	66 1f       	adc	r22, r22
 7d2:	77 1f       	adc	r23, r23
 7d4:	88 1f       	adc	r24, r24
 7d6:	91 50       	subi	r25, 0x01	; 1
 7d8:	50 40       	sbci	r21, 0x00	; 0
 7da:	a9 f7       	brne	.-22     	; 0x7c6 <__mulsf3_pse+0x64>
 7dc:	9e 3f       	cpi	r25, 0xFE	; 254
 7de:	51 05       	cpc	r21, r1
 7e0:	70 f0       	brcs	.+28     	; 0x7fe <__mulsf3_pse+0x9c>
 7e2:	60 cf       	rjmp	.-320    	; 0x6a4 <__fp_inf>
 7e4:	aa cf       	rjmp	.-172    	; 0x73a <__fp_szero>
 7e6:	5f 3f       	cpi	r21, 0xFF	; 255
 7e8:	ec f3       	brlt	.-6      	; 0x7e4 <__mulsf3_pse+0x82>
 7ea:	98 3e       	cpi	r25, 0xE8	; 232
 7ec:	dc f3       	brlt	.-10     	; 0x7e4 <__mulsf3_pse+0x82>
 7ee:	86 95       	lsr	r24
 7f0:	77 95       	ror	r23
 7f2:	67 95       	ror	r22
 7f4:	b7 95       	ror	r27
 7f6:	f7 95       	ror	r31
 7f8:	e7 95       	ror	r30
 7fa:	9f 5f       	subi	r25, 0xFF	; 255
 7fc:	c1 f7       	brne	.-16     	; 0x7ee <__mulsf3_pse+0x8c>
 7fe:	fe 2b       	or	r31, r30
 800:	88 0f       	add	r24, r24
 802:	91 1d       	adc	r25, r1
 804:	96 95       	lsr	r25
 806:	87 95       	ror	r24
 808:	97 f9       	bld	r25, 7
 80a:	08 95       	ret

0000080c <_exit>:
 80c:	f8 94       	cli

0000080e <__stop_program>:
 80e:	ff cf       	rjmp	.-2      	; 0x80e <__stop_program>
