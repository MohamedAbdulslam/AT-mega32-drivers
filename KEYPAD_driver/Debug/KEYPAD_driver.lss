
KEYPAD_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000bce  00000c42  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000018b4  00000000  00000000  00000c54  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000051f  00000000  00000000  00002508  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000100  00000000  00000000  00002a28  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a07  00000000  00000000  00002b28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000033d  00000000  00000000  0000352f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000454  00000000  00000000  0000386c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000204  00000000  00000000  00003cc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038f  00000000  00000000  00003ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000088c  00000000  00000000  00004253  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ec       	ldi	r30, 0xCE	; 206
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 3f 03 	call	0x67e	; 0x67e <main>
  8a:	0c 94 e5 05 	jmp	0xbca	; 0xbca <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Delay_ms>:
#endif

void Delay_ms(f64 period)
{
	u32 i;
	u32 counter=( ( period /1000) * F_CPU )/2;
  92:	20 e0       	ldi	r18, 0x00	; 0
  94:	30 e0       	ldi	r19, 0x00	; 0
  96:	4a e7       	ldi	r20, 0x7A	; 122
  98:	54 e4       	ldi	r21, 0x44	; 68
  9a:	0e 94 9d 04 	call	0x93a	; 0x93a <__divsf3>
  9e:	20 e0       	ldi	r18, 0x00	; 0
  a0:	34 e2       	ldi	r19, 0x24	; 36
  a2:	44 e7       	ldi	r20, 0x74	; 116
  a4:	59 e4       	ldi	r21, 0x49	; 73
  a6:	0e 94 82 05 	call	0xb04	; 0xb04 <__mulsf3>
  aa:	20 e0       	ldi	r18, 0x00	; 0
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	40 e0       	ldi	r20, 0x00	; 0
  b0:	5f e3       	ldi	r21, 0x3F	; 63
  b2:	0e 94 82 05 	call	0xb04	; 0xb04 <__mulsf3>
  b6:	0e 94 05 05 	call	0xa0a	; 0xa0a <__fixunssfsi>
  ba:	46 2f       	mov	r20, r22
  bc:	57 2f       	mov	r21, r23
  be:	68 2f       	mov	r22, r24
  c0:	79 2f       	mov	r23, r25
	for (i=0;i<counter;i++)
  c2:	41 15       	cp	r20, r1
  c4:	51 05       	cpc	r21, r1
  c6:	61 05       	cpc	r22, r1
  c8:	71 05       	cpc	r23, r1
  ca:	59 f0       	breq	.+22     	; 0xe2 <Delay_ms+0x50>
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	dc 01       	movw	r26, r24
  d2:	01 96       	adiw	r24, 0x01	; 1
  d4:	a1 1d       	adc	r26, r1
  d6:	b1 1d       	adc	r27, r1
  d8:	84 17       	cp	r24, r20
  da:	95 07       	cpc	r25, r21
  dc:	a6 07       	cpc	r26, r22
  de:	b7 07       	cpc	r27, r23
  e0:	c1 f7       	brne	.-16     	; 0xd2 <Delay_ms+0x40>
  e2:	08 95       	ret

000000e4 <Delay_us>:
}

void Delay_us(f64 period)
{
	u32 i;
	u32 counter=( ( period /1000000) * F_CPU )/2;
  e4:	20 e0       	ldi	r18, 0x00	; 0
  e6:	34 e2       	ldi	r19, 0x24	; 36
  e8:	44 e7       	ldi	r20, 0x74	; 116
  ea:	59 e4       	ldi	r21, 0x49	; 73
  ec:	0e 94 9d 04 	call	0x93a	; 0x93a <__divsf3>
  f0:	20 e0       	ldi	r18, 0x00	; 0
  f2:	34 e2       	ldi	r19, 0x24	; 36
  f4:	44 e7       	ldi	r20, 0x74	; 116
  f6:	59 e4       	ldi	r21, 0x49	; 73
  f8:	0e 94 82 05 	call	0xb04	; 0xb04 <__mulsf3>
  fc:	20 e0       	ldi	r18, 0x00	; 0
  fe:	30 e0       	ldi	r19, 0x00	; 0
 100:	40 e0       	ldi	r20, 0x00	; 0
 102:	5f e3       	ldi	r21, 0x3F	; 63
 104:	0e 94 82 05 	call	0xb04	; 0xb04 <__mulsf3>
 108:	0e 94 05 05 	call	0xa0a	; 0xa0a <__fixunssfsi>
 10c:	46 2f       	mov	r20, r22
 10e:	57 2f       	mov	r21, r23
 110:	68 2f       	mov	r22, r24
 112:	79 2f       	mov	r23, r25
	for (i=0;i<counter;i++)
 114:	41 15       	cp	r20, r1
 116:	51 05       	cpc	r21, r1
 118:	61 05       	cpc	r22, r1
 11a:	71 05       	cpc	r23, r1
 11c:	59 f0       	breq	.+22     	; 0x134 <Delay_us+0x50>
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	dc 01       	movw	r26, r24
 124:	01 96       	adiw	r24, 0x01	; 1
 126:	a1 1d       	adc	r26, r1
 128:	b1 1d       	adc	r27, r1
 12a:	84 17       	cp	r24, r20
 12c:	95 07       	cpc	r25, r21
 12e:	a6 07       	cpc	r26, r22
 130:	b7 07       	cpc	r27, r23
 132:	c1 f7       	brne	.-16     	; 0x124 <Delay_us+0x40>
 134:	08 95       	ret

00000136 <MDIO_voidSetPinDirection>:
#include "DIO_interface.h"
#include "DIO_private.h"

void MDIO_voidSetPinDirection(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Direction)
{
    switch(Copy_u8Port)
 136:	81 30       	cpi	r24, 0x01	; 1
 138:	49 f1       	breq	.+82     	; 0x18c <MDIO_voidSetPinDirection+0x56>
 13a:	81 30       	cpi	r24, 0x01	; 1
 13c:	38 f0       	brcs	.+14     	; 0x14c <MDIO_voidSetPinDirection+0x16>
 13e:	82 30       	cpi	r24, 0x02	; 2
 140:	09 f4       	brne	.+2      	; 0x144 <MDIO_voidSetPinDirection+0xe>
 142:	44 c0       	rjmp	.+136    	; 0x1cc <MDIO_voidSetPinDirection+0x96>
 144:	83 30       	cpi	r24, 0x03	; 3
 146:	09 f0       	breq	.+2      	; 0x14a <MDIO_voidSetPinDirection+0x14>
 148:	7e c0       	rjmp	.+252    	; 0x246 <MDIO_voidSetPinDirection+0x110>
 14a:	5f c0       	rjmp	.+190    	; 0x20a <MDIO_voidSetPinDirection+0xd4>
	{
		case DIOA : 
		if (Copy_u8Direction==INPUT)
 14c:	44 23       	and	r20, r20
 14e:	71 f4       	brne	.+28     	; 0x16c <MDIO_voidSetPinDirection+0x36>
		{
			CLR_BIT(DDRA,Copy_u8Pin);
 150:	2a b3       	in	r18, 0x1a	; 26
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	ac 01       	movw	r20, r24
 158:	02 c0       	rjmp	.+4      	; 0x15e <MDIO_voidSetPinDirection+0x28>
 15a:	44 0f       	add	r20, r20
 15c:	55 1f       	adc	r21, r21
 15e:	6a 95       	dec	r22
 160:	e2 f7       	brpl	.-8      	; 0x15a <MDIO_voidSetPinDirection+0x24>
 162:	ba 01       	movw	r22, r20
 164:	60 95       	com	r22
 166:	62 23       	and	r22, r18
 168:	6a bb       	out	0x1a, r22	; 26
 16a:	08 95       	ret
		} 
		else if (Copy_u8Direction==OUTPUT)
 16c:	41 30       	cpi	r20, 0x01	; 1
 16e:	09 f0       	breq	.+2      	; 0x172 <MDIO_voidSetPinDirection+0x3c>
 170:	6a c0       	rjmp	.+212    	; 0x246 <MDIO_voidSetPinDirection+0x110>
		{
			SET_BIT(DDRA,Copy_u8Pin);
 172:	2a b3       	in	r18, 0x1a	; 26
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	ac 01       	movw	r20, r24
 17a:	02 c0       	rjmp	.+4      	; 0x180 <MDIO_voidSetPinDirection+0x4a>
 17c:	44 0f       	add	r20, r20
 17e:	55 1f       	adc	r21, r21
 180:	6a 95       	dec	r22
 182:	e2 f7       	brpl	.-8      	; 0x17c <MDIO_voidSetPinDirection+0x46>
 184:	ba 01       	movw	r22, r20
 186:	62 2b       	or	r22, r18
 188:	6a bb       	out	0x1a, r22	; 26
 18a:	08 95       	ret
			/* error */
		}
		break;
		
		case DIOB :
		if (Copy_u8Direction==INPUT)
 18c:	44 23       	and	r20, r20
 18e:	71 f4       	brne	.+28     	; 0x1ac <MDIO_voidSetPinDirection+0x76>
		{
			CLR_BIT(DDRB,Copy_u8Pin);
 190:	27 b3       	in	r18, 0x17	; 23
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	ac 01       	movw	r20, r24
 198:	02 c0       	rjmp	.+4      	; 0x19e <MDIO_voidSetPinDirection+0x68>
 19a:	44 0f       	add	r20, r20
 19c:	55 1f       	adc	r21, r21
 19e:	6a 95       	dec	r22
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <MDIO_voidSetPinDirection+0x64>
 1a2:	ba 01       	movw	r22, r20
 1a4:	60 95       	com	r22
 1a6:	62 23       	and	r22, r18
 1a8:	67 bb       	out	0x17, r22	; 23
 1aa:	08 95       	ret
		}
		else if (Copy_u8Direction==OUTPUT)
 1ac:	41 30       	cpi	r20, 0x01	; 1
 1ae:	09 f0       	breq	.+2      	; 0x1b2 <MDIO_voidSetPinDirection+0x7c>
 1b0:	4a c0       	rjmp	.+148    	; 0x246 <MDIO_voidSetPinDirection+0x110>
		{
			SET_BIT(DDRB,Copy_u8Pin);
 1b2:	27 b3       	in	r18, 0x17	; 23
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	ac 01       	movw	r20, r24
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <MDIO_voidSetPinDirection+0x8a>
 1bc:	44 0f       	add	r20, r20
 1be:	55 1f       	adc	r21, r21
 1c0:	6a 95       	dec	r22
 1c2:	e2 f7       	brpl	.-8      	; 0x1bc <MDIO_voidSetPinDirection+0x86>
 1c4:	ba 01       	movw	r22, r20
 1c6:	62 2b       	or	r22, r18
 1c8:	67 bb       	out	0x17, r22	; 23
 1ca:	08 95       	ret
			/* error */
		}
		break;
		
		case DIOC :
		if (Copy_u8Direction==INPUT)
 1cc:	44 23       	and	r20, r20
 1ce:	71 f4       	brne	.+28     	; 0x1ec <MDIO_voidSetPinDirection+0xb6>
		{
			CLR_BIT(DDRC,Copy_u8Pin);
 1d0:	24 b3       	in	r18, 0x14	; 20
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	ac 01       	movw	r20, r24
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <MDIO_voidSetPinDirection+0xa8>
 1da:	44 0f       	add	r20, r20
 1dc:	55 1f       	adc	r21, r21
 1de:	6a 95       	dec	r22
 1e0:	e2 f7       	brpl	.-8      	; 0x1da <MDIO_voidSetPinDirection+0xa4>
 1e2:	ba 01       	movw	r22, r20
 1e4:	60 95       	com	r22
 1e6:	62 23       	and	r22, r18
 1e8:	64 bb       	out	0x14, r22	; 20
 1ea:	08 95       	ret
		}
		else if (Copy_u8Direction==OUTPUT)
 1ec:	41 30       	cpi	r20, 0x01	; 1
 1ee:	59 f5       	brne	.+86     	; 0x246 <MDIO_voidSetPinDirection+0x110>
		{
			SET_BIT(DDRC,Copy_u8Pin);
 1f0:	24 b3       	in	r18, 0x14	; 20
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	ac 01       	movw	r20, r24
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <MDIO_voidSetPinDirection+0xc8>
 1fa:	44 0f       	add	r20, r20
 1fc:	55 1f       	adc	r21, r21
 1fe:	6a 95       	dec	r22
 200:	e2 f7       	brpl	.-8      	; 0x1fa <MDIO_voidSetPinDirection+0xc4>
 202:	ba 01       	movw	r22, r20
 204:	62 2b       	or	r22, r18
 206:	64 bb       	out	0x14, r22	; 20
 208:	08 95       	ret
			/* error */
		}
		break;
			
		case DIOD :
		if (Copy_u8Direction==INPUT)
 20a:	44 23       	and	r20, r20
 20c:	71 f4       	brne	.+28     	; 0x22a <MDIO_voidSetPinDirection+0xf4>
		{
			CLR_BIT(DDRD,Copy_u8Pin);
 20e:	21 b3       	in	r18, 0x11	; 17
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	ac 01       	movw	r20, r24
 216:	02 c0       	rjmp	.+4      	; 0x21c <MDIO_voidSetPinDirection+0xe6>
 218:	44 0f       	add	r20, r20
 21a:	55 1f       	adc	r21, r21
 21c:	6a 95       	dec	r22
 21e:	e2 f7       	brpl	.-8      	; 0x218 <MDIO_voidSetPinDirection+0xe2>
 220:	ba 01       	movw	r22, r20
 222:	60 95       	com	r22
 224:	62 23       	and	r22, r18
 226:	61 bb       	out	0x11, r22	; 17
 228:	08 95       	ret
		}
		else if (Copy_u8Direction==OUTPUT)
 22a:	41 30       	cpi	r20, 0x01	; 1
 22c:	61 f4       	brne	.+24     	; 0x246 <MDIO_voidSetPinDirection+0x110>
		{
			SET_BIT(DDRD,Copy_u8Pin);
 22e:	21 b3       	in	r18, 0x11	; 17
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	ac 01       	movw	r20, r24
 236:	02 c0       	rjmp	.+4      	; 0x23c <MDIO_voidSetPinDirection+0x106>
 238:	44 0f       	add	r20, r20
 23a:	55 1f       	adc	r21, r21
 23c:	6a 95       	dec	r22
 23e:	e2 f7       	brpl	.-8      	; 0x238 <MDIO_voidSetPinDirection+0x102>
 240:	ba 01       	movw	r22, r20
 242:	62 2b       	or	r22, r18
 244:	61 bb       	out	0x11, r22	; 17
 246:	08 95       	ret

00000248 <MDIO_voidSetPortDirection>:
	}
}
void MDIO_voidSetPortDirection(u8 Copy_u8Port,u8 Copy_u8Direction)
{

  switch(Copy_u8Port)
 248:	81 30       	cpi	r24, 0x01	; 1
 24a:	81 f0       	breq	.+32     	; 0x26c <MDIO_voidSetPortDirection+0x24>
 24c:	81 30       	cpi	r24, 0x01	; 1
 24e:	28 f0       	brcs	.+10     	; 0x25a <MDIO_voidSetPortDirection+0x12>
 250:	82 30       	cpi	r24, 0x02	; 2
 252:	a9 f0       	breq	.+42     	; 0x27e <MDIO_voidSetPortDirection+0x36>
 254:	83 30       	cpi	r24, 0x03	; 3
 256:	21 f5       	brne	.+72     	; 0x2a0 <MDIO_voidSetPortDirection+0x58>
 258:	1b c0       	rjmp	.+54     	; 0x290 <MDIO_voidSetPortDirection+0x48>
  {
	  case DIOA :
	  if (Copy_u8Direction==INPUT)
 25a:	66 23       	and	r22, r22
 25c:	11 f4       	brne	.+4      	; 0x262 <MDIO_voidSetPortDirection+0x1a>
	  {
		  DDRA=0x00;
 25e:	1a ba       	out	0x1a, r1	; 26
 260:	08 95       	ret
	  }
	  else if (Copy_u8Direction==OUTPUT)
 262:	61 30       	cpi	r22, 0x01	; 1
 264:	e9 f4       	brne	.+58     	; 0x2a0 <MDIO_voidSetPortDirection+0x58>
	  {
		  DDRA=0xFF;
 266:	8f ef       	ldi	r24, 0xFF	; 255
 268:	8a bb       	out	0x1a, r24	; 26
 26a:	08 95       	ret
	  {
	    /* error */
	  }
	  break;
	  case DIOB :
	  if (Copy_u8Direction==INPUT)
 26c:	66 23       	and	r22, r22
 26e:	11 f4       	brne	.+4      	; 0x274 <MDIO_voidSetPortDirection+0x2c>
	  {
		  DDRB=0x00;
 270:	17 ba       	out	0x17, r1	; 23
 272:	08 95       	ret
	  }
	  else if (Copy_u8Direction==OUTPUT)
 274:	61 30       	cpi	r22, 0x01	; 1
 276:	a1 f4       	brne	.+40     	; 0x2a0 <MDIO_voidSetPortDirection+0x58>
	  {
		  DDRB=0xFF;
 278:	8f ef       	ldi	r24, 0xFF	; 255
 27a:	87 bb       	out	0x17, r24	; 23
 27c:	08 95       	ret
	  {
		  /* error */
	  }
	  break;	
	  case DIOC :
	  if (Copy_u8Direction==INPUT)
 27e:	66 23       	and	r22, r22
 280:	11 f4       	brne	.+4      	; 0x286 <MDIO_voidSetPortDirection+0x3e>
	  {
		  DDRC=0x00;
 282:	14 ba       	out	0x14, r1	; 20
 284:	08 95       	ret
	  }
	  else if (Copy_u8Direction==OUTPUT)
 286:	61 30       	cpi	r22, 0x01	; 1
 288:	59 f4       	brne	.+22     	; 0x2a0 <MDIO_voidSetPortDirection+0x58>
	  {
		  DDRC=0xFF;
 28a:	8f ef       	ldi	r24, 0xFF	; 255
 28c:	84 bb       	out	0x14, r24	; 20
 28e:	08 95       	ret
	  {
		  /* error */
	  }
	  break;
	  case DIOD :
	  if (Copy_u8Direction==INPUT)
 290:	66 23       	and	r22, r22
 292:	11 f4       	brne	.+4      	; 0x298 <MDIO_voidSetPortDirection+0x50>
	  {
		  DDRD=0x00;
 294:	11 ba       	out	0x11, r1	; 17
 296:	08 95       	ret
	  }
	  else if (Copy_u8Direction==OUTPUT)
 298:	61 30       	cpi	r22, 0x01	; 1
 29a:	11 f4       	brne	.+4      	; 0x2a0 <MDIO_voidSetPortDirection+0x58>
	  {
		  DDRD=0xFF;
 29c:	8f ef       	ldi	r24, 0xFF	; 255
 29e:	81 bb       	out	0x11, r24	; 17
 2a0:	08 95       	ret

000002a2 <MDIO_voidSetPinValue>:

}

void MDIO_voidSetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)
{
    switch(Copy_u8Port)
 2a2:	81 30       	cpi	r24, 0x01	; 1
 2a4:	49 f1       	breq	.+82     	; 0x2f8 <MDIO_voidSetPinValue+0x56>
 2a6:	81 30       	cpi	r24, 0x01	; 1
 2a8:	38 f0       	brcs	.+14     	; 0x2b8 <MDIO_voidSetPinValue+0x16>
 2aa:	82 30       	cpi	r24, 0x02	; 2
 2ac:	09 f4       	brne	.+2      	; 0x2b0 <MDIO_voidSetPinValue+0xe>
 2ae:	44 c0       	rjmp	.+136    	; 0x338 <MDIO_voidSetPinValue+0x96>
 2b0:	83 30       	cpi	r24, 0x03	; 3
 2b2:	09 f0       	breq	.+2      	; 0x2b6 <MDIO_voidSetPinValue+0x14>
 2b4:	7e c0       	rjmp	.+252    	; 0x3b2 <MDIO_voidSetPinValue+0x110>
 2b6:	5f c0       	rjmp	.+190    	; 0x376 <MDIO_voidSetPinValue+0xd4>
    {
	    case DIOA :
	    if (Copy_u8Value==LOW)
 2b8:	44 23       	and	r20, r20
 2ba:	71 f4       	brne	.+28     	; 0x2d8 <MDIO_voidSetPinValue+0x36>
	    {
		    CLR_BIT(PORTA,Copy_u8Pin);
 2bc:	2b b3       	in	r18, 0x1b	; 27
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	ac 01       	movw	r20, r24
 2c4:	02 c0       	rjmp	.+4      	; 0x2ca <MDIO_voidSetPinValue+0x28>
 2c6:	44 0f       	add	r20, r20
 2c8:	55 1f       	adc	r21, r21
 2ca:	6a 95       	dec	r22
 2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <MDIO_voidSetPinValue+0x24>
 2ce:	ba 01       	movw	r22, r20
 2d0:	60 95       	com	r22
 2d2:	62 23       	and	r22, r18
 2d4:	6b bb       	out	0x1b, r22	; 27
 2d6:	08 95       	ret
	    }
	    else if (Copy_u8Value==HIGH)
 2d8:	41 30       	cpi	r20, 0x01	; 1
 2da:	09 f0       	breq	.+2      	; 0x2de <MDIO_voidSetPinValue+0x3c>
 2dc:	6a c0       	rjmp	.+212    	; 0x3b2 <MDIO_voidSetPinValue+0x110>
	    {
		    SET_BIT(PORTA,Copy_u8Pin);
 2de:	2b b3       	in	r18, 0x1b	; 27
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	ac 01       	movw	r20, r24
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <MDIO_voidSetPinValue+0x4a>
 2e8:	44 0f       	add	r20, r20
 2ea:	55 1f       	adc	r21, r21
 2ec:	6a 95       	dec	r22
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <MDIO_voidSetPinValue+0x46>
 2f0:	ba 01       	movw	r22, r20
 2f2:	62 2b       	or	r22, r18
 2f4:	6b bb       	out	0x1b, r22	; 27
 2f6:	08 95       	ret
		    /* error */
	    }
	    break;
	    
	    case DIOB :
	    if (Copy_u8Value==LOW)
 2f8:	44 23       	and	r20, r20
 2fa:	71 f4       	brne	.+28     	; 0x318 <MDIO_voidSetPinValue+0x76>
	    {
		    CLR_BIT(PORTB,Copy_u8Pin);
 2fc:	28 b3       	in	r18, 0x18	; 24
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	ac 01       	movw	r20, r24
 304:	02 c0       	rjmp	.+4      	; 0x30a <MDIO_voidSetPinValue+0x68>
 306:	44 0f       	add	r20, r20
 308:	55 1f       	adc	r21, r21
 30a:	6a 95       	dec	r22
 30c:	e2 f7       	brpl	.-8      	; 0x306 <MDIO_voidSetPinValue+0x64>
 30e:	ba 01       	movw	r22, r20
 310:	60 95       	com	r22
 312:	62 23       	and	r22, r18
 314:	68 bb       	out	0x18, r22	; 24
 316:	08 95       	ret
	    }
	    else if (Copy_u8Value==HIGH)
 318:	41 30       	cpi	r20, 0x01	; 1
 31a:	09 f0       	breq	.+2      	; 0x31e <MDIO_voidSetPinValue+0x7c>
 31c:	4a c0       	rjmp	.+148    	; 0x3b2 <MDIO_voidSetPinValue+0x110>
	    {
		    SET_BIT(PORTB,Copy_u8Pin);
 31e:	28 b3       	in	r18, 0x18	; 24
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	ac 01       	movw	r20, r24
 326:	02 c0       	rjmp	.+4      	; 0x32c <MDIO_voidSetPinValue+0x8a>
 328:	44 0f       	add	r20, r20
 32a:	55 1f       	adc	r21, r21
 32c:	6a 95       	dec	r22
 32e:	e2 f7       	brpl	.-8      	; 0x328 <MDIO_voidSetPinValue+0x86>
 330:	ba 01       	movw	r22, r20
 332:	62 2b       	or	r22, r18
 334:	68 bb       	out	0x18, r22	; 24
 336:	08 95       	ret
	    {
		    /* error */
	    }
	    break;
	    case DIOC :
	    if (Copy_u8Value==LOW)
 338:	44 23       	and	r20, r20
 33a:	71 f4       	brne	.+28     	; 0x358 <MDIO_voidSetPinValue+0xb6>
	    {
		    CLR_BIT(PORTC,Copy_u8Pin);
 33c:	25 b3       	in	r18, 0x15	; 21
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	ac 01       	movw	r20, r24
 344:	02 c0       	rjmp	.+4      	; 0x34a <MDIO_voidSetPinValue+0xa8>
 346:	44 0f       	add	r20, r20
 348:	55 1f       	adc	r21, r21
 34a:	6a 95       	dec	r22
 34c:	e2 f7       	brpl	.-8      	; 0x346 <MDIO_voidSetPinValue+0xa4>
 34e:	ba 01       	movw	r22, r20
 350:	60 95       	com	r22
 352:	62 23       	and	r22, r18
 354:	65 bb       	out	0x15, r22	; 21
 356:	08 95       	ret
	    }
	    else if (Copy_u8Value==HIGH)
 358:	41 30       	cpi	r20, 0x01	; 1
 35a:	59 f5       	brne	.+86     	; 0x3b2 <MDIO_voidSetPinValue+0x110>
	    {
		    SET_BIT(PORTC,Copy_u8Pin);
 35c:	25 b3       	in	r18, 0x15	; 21
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	ac 01       	movw	r20, r24
 364:	02 c0       	rjmp	.+4      	; 0x36a <MDIO_voidSetPinValue+0xc8>
 366:	44 0f       	add	r20, r20
 368:	55 1f       	adc	r21, r21
 36a:	6a 95       	dec	r22
 36c:	e2 f7       	brpl	.-8      	; 0x366 <MDIO_voidSetPinValue+0xc4>
 36e:	ba 01       	movw	r22, r20
 370:	62 2b       	or	r22, r18
 372:	65 bb       	out	0x15, r22	; 21
 374:	08 95       	ret
	    {
		    /* error */
	    }
	    break;
	    case DIOD :
	    if (Copy_u8Value==LOW)
 376:	44 23       	and	r20, r20
 378:	71 f4       	brne	.+28     	; 0x396 <MDIO_voidSetPinValue+0xf4>
	    {
		    CLR_BIT(PORTD,Copy_u8Pin);
 37a:	22 b3       	in	r18, 0x12	; 18
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	ac 01       	movw	r20, r24
 382:	02 c0       	rjmp	.+4      	; 0x388 <MDIO_voidSetPinValue+0xe6>
 384:	44 0f       	add	r20, r20
 386:	55 1f       	adc	r21, r21
 388:	6a 95       	dec	r22
 38a:	e2 f7       	brpl	.-8      	; 0x384 <MDIO_voidSetPinValue+0xe2>
 38c:	ba 01       	movw	r22, r20
 38e:	60 95       	com	r22
 390:	62 23       	and	r22, r18
 392:	62 bb       	out	0x12, r22	; 18
 394:	08 95       	ret
	    }
	    else if (Copy_u8Value==HIGH)
 396:	41 30       	cpi	r20, 0x01	; 1
 398:	61 f4       	brne	.+24     	; 0x3b2 <MDIO_voidSetPinValue+0x110>
	    {
		    SET_BIT(PORTD,Copy_u8Pin);
 39a:	22 b3       	in	r18, 0x12	; 18
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	ac 01       	movw	r20, r24
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <MDIO_voidSetPinValue+0x106>
 3a4:	44 0f       	add	r20, r20
 3a6:	55 1f       	adc	r21, r21
 3a8:	6a 95       	dec	r22
 3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <MDIO_voidSetPinValue+0x102>
 3ac:	ba 01       	movw	r22, r20
 3ae:	62 2b       	or	r22, r18
 3b0:	62 bb       	out	0x12, r22	; 18
 3b2:	08 95       	ret

000003b4 <MDIO_u8GetPinValue>:
    }
}
u8 MDIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin)
{
	 u8 Local_u8value=0;
	 switch(Copy_u8Port)
 3b4:	81 30       	cpi	r24, 0x01	; 1
 3b6:	89 f0       	breq	.+34     	; 0x3da <MDIO_u8GetPinValue+0x26>
 3b8:	81 30       	cpi	r24, 0x01	; 1
 3ba:	28 f0       	brcs	.+10     	; 0x3c6 <MDIO_u8GetPinValue+0x12>
 3bc:	82 30       	cpi	r24, 0x02	; 2
 3be:	b9 f0       	breq	.+46     	; 0x3ee <MDIO_u8GetPinValue+0x3a>
 3c0:	83 30       	cpi	r24, 0x03	; 3
 3c2:	49 f5       	brne	.+82     	; 0x416 <MDIO_u8GetPinValue+0x62>
 3c4:	1e c0       	rjmp	.+60     	; 0x402 <MDIO_u8GetPinValue+0x4e>
	 {
		 case DIOA :
		 Local_u8value=GET_BIT(PINA,Copy_u8Pin);
 3c6:	29 b3       	in	r18, 0x19	; 25
 3c8:	30 e0       	ldi	r19, 0x00	; 0
 3ca:	c9 01       	movw	r24, r18
 3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <MDIO_u8GetPinValue+0x1e>
 3ce:	95 95       	asr	r25
 3d0:	87 95       	ror	r24
 3d2:	6a 95       	dec	r22
 3d4:	e2 f7       	brpl	.-8      	; 0x3ce <MDIO_u8GetPinValue+0x1a>
 3d6:	81 70       	andi	r24, 0x01	; 1
		 break;
 3d8:	08 95       	ret
		 case DIOB :
		 Local_u8value=GET_BIT(PINB,Copy_u8Pin);
 3da:	26 b3       	in	r18, 0x16	; 22
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	c9 01       	movw	r24, r18
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <MDIO_u8GetPinValue+0x32>
 3e2:	95 95       	asr	r25
 3e4:	87 95       	ror	r24
 3e6:	6a 95       	dec	r22
 3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <MDIO_u8GetPinValue+0x2e>
 3ea:	81 70       	andi	r24, 0x01	; 1
		 break;
 3ec:	08 95       	ret
		 case DIOC :
		 Local_u8value=GET_BIT(PINC,Copy_u8Pin);
 3ee:	23 b3       	in	r18, 0x13	; 19
 3f0:	30 e0       	ldi	r19, 0x00	; 0
 3f2:	c9 01       	movw	r24, r18
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <MDIO_u8GetPinValue+0x46>
 3f6:	95 95       	asr	r25
 3f8:	87 95       	ror	r24
 3fa:	6a 95       	dec	r22
 3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <MDIO_u8GetPinValue+0x42>
 3fe:	81 70       	andi	r24, 0x01	; 1
		 break;
 400:	08 95       	ret
		 case DIOD :
		 Local_u8value=GET_BIT(PIND,Copy_u8Pin);
 402:	20 b3       	in	r18, 0x10	; 16
 404:	30 e0       	ldi	r19, 0x00	; 0
 406:	c9 01       	movw	r24, r18
 408:	02 c0       	rjmp	.+4      	; 0x40e <MDIO_u8GetPinValue+0x5a>
 40a:	95 95       	asr	r25
 40c:	87 95       	ror	r24
 40e:	6a 95       	dec	r22
 410:	e2 f7       	brpl	.-8      	; 0x40a <MDIO_u8GetPinValue+0x56>
 412:	81 70       	andi	r24, 0x01	; 1
		 break;		 		 
 414:	08 95       	ret
	    
    }
}
u8 MDIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin)
{
	 u8 Local_u8value=0;
 416:	80 e0       	ldi	r24, 0x00	; 0
		 break;		 		 
		 default: break;
		 
	 }
	 return Local_u8value;
}
 418:	08 95       	ret

0000041a <MDIO_voidSetPortValue>:
void MDIO_voidSetPortValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
	switch(Copy_u8Port)
 41a:	81 30       	cpi	r24, 0x01	; 1
 41c:	49 f0       	breq	.+18     	; 0x430 <MDIO_voidSetPortValue+0x16>
 41e:	81 30       	cpi	r24, 0x01	; 1
 420:	28 f0       	brcs	.+10     	; 0x42c <MDIO_voidSetPortValue+0x12>
 422:	82 30       	cpi	r24, 0x02	; 2
 424:	39 f0       	breq	.+14     	; 0x434 <MDIO_voidSetPortValue+0x1a>
 426:	83 30       	cpi	r24, 0x03	; 3
 428:	41 f4       	brne	.+16     	; 0x43a <MDIO_voidSetPortValue+0x20>
 42a:	06 c0       	rjmp	.+12     	; 0x438 <MDIO_voidSetPortValue+0x1e>
	{
		case DIOA :
		PORTA=Copy_u8Value;
 42c:	6b bb       	out	0x1b, r22	; 27
		break;
 42e:	08 95       	ret
		case DIOB :
		PORTB=Copy_u8Value;
 430:	68 bb       	out	0x18, r22	; 24
		break;	
 432:	08 95       	ret
		case DIOC :
		PORTC=Copy_u8Value;
 434:	65 bb       	out	0x15, r22	; 21
		break;
 436:	08 95       	ret
		case DIOD :
		PORTD=Copy_u8Value;
 438:	62 bb       	out	0x12, r22	; 18
 43a:	08 95       	ret

0000043c <MDIO_voidTogglePin>:
	}
}

void MDIO_voidTogglePin(u8 Copy_u8Port,u8 Copy_u8Pin)
{
	switch(Copy_u8Port)
 43c:	81 30       	cpi	r24, 0x01	; 1
 43e:	a1 f0       	breq	.+40     	; 0x468 <MDIO_voidTogglePin+0x2c>
 440:	81 30       	cpi	r24, 0x01	; 1
 442:	28 f0       	brcs	.+10     	; 0x44e <MDIO_voidTogglePin+0x12>
 444:	82 30       	cpi	r24, 0x02	; 2
 446:	e9 f0       	breq	.+58     	; 0x482 <MDIO_voidTogglePin+0x46>
 448:	83 30       	cpi	r24, 0x03	; 3
 44a:	a1 f5       	brne	.+104    	; 0x4b4 <MDIO_voidTogglePin+0x78>
 44c:	27 c0       	rjmp	.+78     	; 0x49c <MDIO_voidTogglePin+0x60>
	{
		
		case DIOA :
		TOG_BIT(PORTA,Copy_u8Pin);
 44e:	2b b3       	in	r18, 0x1b	; 27
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	ac 01       	movw	r20, r24
 456:	02 c0       	rjmp	.+4      	; 0x45c <MDIO_voidTogglePin+0x20>
 458:	44 0f       	add	r20, r20
 45a:	55 1f       	adc	r21, r21
 45c:	6a 95       	dec	r22
 45e:	e2 f7       	brpl	.-8      	; 0x458 <MDIO_voidTogglePin+0x1c>
 460:	ba 01       	movw	r22, r20
 462:	62 27       	eor	r22, r18
 464:	6b bb       	out	0x1b, r22	; 27
		break;
 466:	08 95       	ret
		case DIOB :
		TOG_BIT(PORTB,Copy_u8Pin);
 468:	28 b3       	in	r18, 0x18	; 24
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	ac 01       	movw	r20, r24
 470:	02 c0       	rjmp	.+4      	; 0x476 <MDIO_voidTogglePin+0x3a>
 472:	44 0f       	add	r20, r20
 474:	55 1f       	adc	r21, r21
 476:	6a 95       	dec	r22
 478:	e2 f7       	brpl	.-8      	; 0x472 <MDIO_voidTogglePin+0x36>
 47a:	ba 01       	movw	r22, r20
 47c:	62 27       	eor	r22, r18
 47e:	68 bb       	out	0x18, r22	; 24
		break;
 480:	08 95       	ret
		case DIOC :
		TOG_BIT(PORTC,Copy_u8Pin);
 482:	25 b3       	in	r18, 0x15	; 21
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	ac 01       	movw	r20, r24
 48a:	02 c0       	rjmp	.+4      	; 0x490 <MDIO_voidTogglePin+0x54>
 48c:	44 0f       	add	r20, r20
 48e:	55 1f       	adc	r21, r21
 490:	6a 95       	dec	r22
 492:	e2 f7       	brpl	.-8      	; 0x48c <MDIO_voidTogglePin+0x50>
 494:	ba 01       	movw	r22, r20
 496:	62 27       	eor	r22, r18
 498:	65 bb       	out	0x15, r22	; 21
		break;
 49a:	08 95       	ret
		case DIOD :
		TOG_BIT(PORTD,Copy_u8Pin);
 49c:	22 b3       	in	r18, 0x12	; 18
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	ac 01       	movw	r20, r24
 4a4:	02 c0       	rjmp	.+4      	; 0x4aa <MDIO_voidTogglePin+0x6e>
 4a6:	44 0f       	add	r20, r20
 4a8:	55 1f       	adc	r21, r21
 4aa:	6a 95       	dec	r22
 4ac:	e2 f7       	brpl	.-8      	; 0x4a6 <MDIO_voidTogglePin+0x6a>
 4ae:	ba 01       	movw	r22, r20
 4b0:	62 27       	eor	r22, r18
 4b2:	62 bb       	out	0x12, r22	; 18
 4b4:	08 95       	ret

000004b6 <MDIO_voidTogglePort>:
	}
}

void MDIO_voidTogglePort(u8 Copy_u8Port)
{
	    switch(Copy_u8Port)
 4b6:	81 30       	cpi	r24, 0x01	; 1
 4b8:	59 f0       	breq	.+22     	; 0x4d0 <MDIO_voidTogglePort+0x1a>
 4ba:	81 30       	cpi	r24, 0x01	; 1
 4bc:	28 f0       	brcs	.+10     	; 0x4c8 <MDIO_voidTogglePort+0x12>
 4be:	82 30       	cpi	r24, 0x02	; 2
 4c0:	59 f0       	breq	.+22     	; 0x4d8 <MDIO_voidTogglePort+0x22>
 4c2:	83 30       	cpi	r24, 0x03	; 3
 4c4:	81 f4       	brne	.+32     	; 0x4e6 <MDIO_voidTogglePort+0x30>
 4c6:	0c c0       	rjmp	.+24     	; 0x4e0 <MDIO_voidTogglePort+0x2a>
		{
		case DIOA :
		PORTA=~PORTA;
 4c8:	8b b3       	in	r24, 0x1b	; 27
 4ca:	80 95       	com	r24
 4cc:	8b bb       	out	0x1b, r24	; 27
		break;
 4ce:	08 95       	ret
		case DIOB :
		PORTB=~PORTB;
 4d0:	88 b3       	in	r24, 0x18	; 24
 4d2:	80 95       	com	r24
 4d4:	88 bb       	out	0x18, r24	; 24
		break;
 4d6:	08 95       	ret
		case DIOC :
		PORTC=~PORTC;
 4d8:	85 b3       	in	r24, 0x15	; 21
 4da:	80 95       	com	r24
 4dc:	85 bb       	out	0x15, r24	; 21
		break;
 4de:	08 95       	ret
		case DIOD :
		PORTD=~PORTD;
 4e0:	82 b3       	in	r24, 0x12	; 18
 4e2:	80 95       	com	r24
 4e4:	82 bb       	out	0x12, r24	; 18
 4e6:	08 95       	ret

000004e8 <MDIO_voidEnablePullUp>:
		}			
}

void MDIO_voidEnablePullUp(u8 Copy_u8Port,u8 Copy_u8Pin)
{
	switch(Copy_u8Port)
 4e8:	81 30       	cpi	r24, 0x01	; 1
 4ea:	a1 f0       	breq	.+40     	; 0x514 <MDIO_voidEnablePullUp+0x2c>
 4ec:	81 30       	cpi	r24, 0x01	; 1
 4ee:	28 f0       	brcs	.+10     	; 0x4fa <MDIO_voidEnablePullUp+0x12>
 4f0:	82 30       	cpi	r24, 0x02	; 2
 4f2:	e9 f0       	breq	.+58     	; 0x52e <MDIO_voidEnablePullUp+0x46>
 4f4:	83 30       	cpi	r24, 0x03	; 3
 4f6:	a1 f5       	brne	.+104    	; 0x560 <MDIO_voidEnablePullUp+0x78>
 4f8:	27 c0       	rjmp	.+78     	; 0x548 <MDIO_voidEnablePullUp+0x60>
	{
		case DIOA : 
		SET_BIT(PORTA,Copy_u8Pin);
 4fa:	2b b3       	in	r18, 0x1b	; 27
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	ac 01       	movw	r20, r24
 502:	02 c0       	rjmp	.+4      	; 0x508 <MDIO_voidEnablePullUp+0x20>
 504:	44 0f       	add	r20, r20
 506:	55 1f       	adc	r21, r21
 508:	6a 95       	dec	r22
 50a:	e2 f7       	brpl	.-8      	; 0x504 <MDIO_voidEnablePullUp+0x1c>
 50c:	ba 01       	movw	r22, r20
 50e:	62 2b       	or	r22, r18
 510:	6b bb       	out	0x1b, r22	; 27
		break;
 512:	08 95       	ret
		case DIOB :
		SET_BIT(PORTB,Copy_u8Pin);
 514:	28 b3       	in	r18, 0x18	; 24
 516:	81 e0       	ldi	r24, 0x01	; 1
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	ac 01       	movw	r20, r24
 51c:	02 c0       	rjmp	.+4      	; 0x522 <MDIO_voidEnablePullUp+0x3a>
 51e:	44 0f       	add	r20, r20
 520:	55 1f       	adc	r21, r21
 522:	6a 95       	dec	r22
 524:	e2 f7       	brpl	.-8      	; 0x51e <MDIO_voidEnablePullUp+0x36>
 526:	ba 01       	movw	r22, r20
 528:	62 2b       	or	r22, r18
 52a:	68 bb       	out	0x18, r22	; 24
		break;
 52c:	08 95       	ret
		case DIOC :
		SET_BIT(PORTC,Copy_u8Pin);
 52e:	25 b3       	in	r18, 0x15	; 21
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	ac 01       	movw	r20, r24
 536:	02 c0       	rjmp	.+4      	; 0x53c <MDIO_voidEnablePullUp+0x54>
 538:	44 0f       	add	r20, r20
 53a:	55 1f       	adc	r21, r21
 53c:	6a 95       	dec	r22
 53e:	e2 f7       	brpl	.-8      	; 0x538 <MDIO_voidEnablePullUp+0x50>
 540:	ba 01       	movw	r22, r20
 542:	62 2b       	or	r22, r18
 544:	65 bb       	out	0x15, r22	; 21
		break;
 546:	08 95       	ret
		case DIOD :
		SET_BIT(PORTD,Copy_u8Pin);
 548:	22 b3       	in	r18, 0x12	; 18
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	ac 01       	movw	r20, r24
 550:	02 c0       	rjmp	.+4      	; 0x556 <MDIO_voidEnablePullUp+0x6e>
 552:	44 0f       	add	r20, r20
 554:	55 1f       	adc	r21, r21
 556:	6a 95       	dec	r22
 558:	e2 f7       	brpl	.-8      	; 0x552 <MDIO_voidEnablePullUp+0x6a>
 55a:	ba 01       	movw	r22, r20
 55c:	62 2b       	or	r22, r18
 55e:	62 bb       	out	0x12, r22	; 18
 560:	08 95       	ret

00000562 <MDIO_voidDisablePullUp>:
	}
}

void MDIO_voidDisablePullUp(u8 Copy_u8Port,u8 Copy_u8Pin)
{
		switch(Copy_u8Port)
 562:	81 30       	cpi	r24, 0x01	; 1
 564:	a9 f0       	breq	.+42     	; 0x590 <MDIO_voidDisablePullUp+0x2e>
 566:	81 30       	cpi	r24, 0x01	; 1
 568:	28 f0       	brcs	.+10     	; 0x574 <MDIO_voidDisablePullUp+0x12>
 56a:	82 30       	cpi	r24, 0x02	; 2
 56c:	f9 f0       	breq	.+62     	; 0x5ac <MDIO_voidDisablePullUp+0x4a>
 56e:	83 30       	cpi	r24, 0x03	; 3
 570:	c1 f5       	brne	.+112    	; 0x5e2 <MDIO_voidDisablePullUp+0x80>
 572:	2a c0       	rjmp	.+84     	; 0x5c8 <MDIO_voidDisablePullUp+0x66>
		{
			case DIOA :
			CLR_BIT(PORTA,Copy_u8Pin);
 574:	2b b3       	in	r18, 0x1b	; 27
 576:	81 e0       	ldi	r24, 0x01	; 1
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	ac 01       	movw	r20, r24
 57c:	02 c0       	rjmp	.+4      	; 0x582 <MDIO_voidDisablePullUp+0x20>
 57e:	44 0f       	add	r20, r20
 580:	55 1f       	adc	r21, r21
 582:	6a 95       	dec	r22
 584:	e2 f7       	brpl	.-8      	; 0x57e <MDIO_voidDisablePullUp+0x1c>
 586:	ba 01       	movw	r22, r20
 588:	60 95       	com	r22
 58a:	62 23       	and	r22, r18
 58c:	6b bb       	out	0x1b, r22	; 27
			break;
 58e:	08 95       	ret
			case DIOB :
			CLR_BIT(PORTB,Copy_u8Pin);
 590:	28 b3       	in	r18, 0x18	; 24
 592:	81 e0       	ldi	r24, 0x01	; 1
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	ac 01       	movw	r20, r24
 598:	02 c0       	rjmp	.+4      	; 0x59e <MDIO_voidDisablePullUp+0x3c>
 59a:	44 0f       	add	r20, r20
 59c:	55 1f       	adc	r21, r21
 59e:	6a 95       	dec	r22
 5a0:	e2 f7       	brpl	.-8      	; 0x59a <MDIO_voidDisablePullUp+0x38>
 5a2:	ba 01       	movw	r22, r20
 5a4:	60 95       	com	r22
 5a6:	62 23       	and	r22, r18
 5a8:	68 bb       	out	0x18, r22	; 24
			break;
 5aa:	08 95       	ret
			case DIOC :
			CLR_BIT(PORTC,Copy_u8Pin);
 5ac:	25 b3       	in	r18, 0x15	; 21
 5ae:	81 e0       	ldi	r24, 0x01	; 1
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	ac 01       	movw	r20, r24
 5b4:	02 c0       	rjmp	.+4      	; 0x5ba <MDIO_voidDisablePullUp+0x58>
 5b6:	44 0f       	add	r20, r20
 5b8:	55 1f       	adc	r21, r21
 5ba:	6a 95       	dec	r22
 5bc:	e2 f7       	brpl	.-8      	; 0x5b6 <MDIO_voidDisablePullUp+0x54>
 5be:	ba 01       	movw	r22, r20
 5c0:	60 95       	com	r22
 5c2:	62 23       	and	r22, r18
 5c4:	65 bb       	out	0x15, r22	; 21
			break;
 5c6:	08 95       	ret
			case DIOD :
			CLR_BIT(PORTD,Copy_u8Pin);
 5c8:	22 b3       	in	r18, 0x12	; 18
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	ac 01       	movw	r20, r24
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <MDIO_voidDisablePullUp+0x74>
 5d2:	44 0f       	add	r20, r20
 5d4:	55 1f       	adc	r21, r21
 5d6:	6a 95       	dec	r22
 5d8:	e2 f7       	brpl	.-8      	; 0x5d2 <MDIO_voidDisablePullUp+0x70>
 5da:	ba 01       	movw	r22, r20
 5dc:	60 95       	com	r22
 5de:	62 23       	and	r22, r18
 5e0:	62 bb       	out	0x12, r22	; 18
 5e2:	08 95       	ret

000005e4 <MDIO_voidWriteLowNibble>:
		}
}

void MDIO_voidWriteLowNibble(u8 Copy_u8Port,u8 Copy_u8Value)
{
	Copy_u8Value&=0x0f;
 5e4:	6f 70       	andi	r22, 0x0F	; 15
	switch(Copy_u8Port)
 5e6:	81 30       	cpi	r24, 0x01	; 1
 5e8:	71 f0       	breq	.+28     	; 0x606 <MDIO_voidWriteLowNibble+0x22>
 5ea:	81 30       	cpi	r24, 0x01	; 1
 5ec:	28 f0       	brcs	.+10     	; 0x5f8 <MDIO_voidWriteLowNibble+0x14>
 5ee:	82 30       	cpi	r24, 0x02	; 2
 5f0:	89 f0       	breq	.+34     	; 0x614 <MDIO_voidWriteLowNibble+0x30>
 5f2:	83 30       	cpi	r24, 0x03	; 3
 5f4:	e1 f4       	brne	.+56     	; 0x62e <MDIO_voidWriteLowNibble+0x4a>
 5f6:	15 c0       	rjmp	.+42     	; 0x622 <MDIO_voidWriteLowNibble+0x3e>
	{
		case DIOA :
		PORTA&=0xf0;
 5f8:	8b b3       	in	r24, 0x1b	; 27
 5fa:	80 7f       	andi	r24, 0xF0	; 240
 5fc:	8b bb       	out	0x1b, r24	; 27
		PORTA|=Copy_u8Value;
 5fe:	8b b3       	in	r24, 0x1b	; 27
 600:	68 2b       	or	r22, r24
 602:	6b bb       	out	0x1b, r22	; 27
		break;
 604:	08 95       	ret
		case DIOB :
		PORTB&=0xf0;
 606:	88 b3       	in	r24, 0x18	; 24
 608:	80 7f       	andi	r24, 0xF0	; 240
 60a:	88 bb       	out	0x18, r24	; 24
		PORTB|=Copy_u8Value;
 60c:	88 b3       	in	r24, 0x18	; 24
 60e:	68 2b       	or	r22, r24
 610:	68 bb       	out	0x18, r22	; 24
		break;
 612:	08 95       	ret
		case DIOC :
		PORTC&=0xf0;
 614:	85 b3       	in	r24, 0x15	; 21
 616:	80 7f       	andi	r24, 0xF0	; 240
 618:	85 bb       	out	0x15, r24	; 21
		PORTC|=Copy_u8Value;
 61a:	85 b3       	in	r24, 0x15	; 21
 61c:	68 2b       	or	r22, r24
 61e:	65 bb       	out	0x15, r22	; 21
		break;
 620:	08 95       	ret
		case DIOD :
		PORTD&=0xf0;
 622:	82 b3       	in	r24, 0x12	; 18
 624:	80 7f       	andi	r24, 0xF0	; 240
 626:	82 bb       	out	0x12, r24	; 18
		PORTD|=Copy_u8Value;
 628:	82 b3       	in	r24, 0x12	; 18
 62a:	68 2b       	or	r22, r24
 62c:	62 bb       	out	0x12, r22	; 18
 62e:	08 95       	ret

00000630 <MDIO_voidWriteHighNibble>:
	
}

void MDIO_voidWriteHighNibble(u8 Copy_u8Port,u8 Copy_u8Value)
{
	Copy_u8Value<<=4;
 630:	62 95       	swap	r22
 632:	60 7f       	andi	r22, 0xF0	; 240
	switch(Copy_u8Port)
 634:	81 30       	cpi	r24, 0x01	; 1
 636:	71 f0       	breq	.+28     	; 0x654 <MDIO_voidWriteHighNibble+0x24>
 638:	81 30       	cpi	r24, 0x01	; 1
 63a:	28 f0       	brcs	.+10     	; 0x646 <MDIO_voidWriteHighNibble+0x16>
 63c:	82 30       	cpi	r24, 0x02	; 2
 63e:	89 f0       	breq	.+34     	; 0x662 <MDIO_voidWriteHighNibble+0x32>
 640:	83 30       	cpi	r24, 0x03	; 3
 642:	e1 f4       	brne	.+56     	; 0x67c <MDIO_voidWriteHighNibble+0x4c>
 644:	15 c0       	rjmp	.+42     	; 0x670 <MDIO_voidWriteHighNibble+0x40>
	{
		case DIOA :
		PORTA&=0x0f;
 646:	8b b3       	in	r24, 0x1b	; 27
 648:	8f 70       	andi	r24, 0x0F	; 15
 64a:	8b bb       	out	0x1b, r24	; 27
		PORTA|=Copy_u8Value;
 64c:	8b b3       	in	r24, 0x1b	; 27
 64e:	68 2b       	or	r22, r24
 650:	6b bb       	out	0x1b, r22	; 27
		break;
 652:	08 95       	ret
		case DIOB :
		PORTB&=0x0f;
 654:	88 b3       	in	r24, 0x18	; 24
 656:	8f 70       	andi	r24, 0x0F	; 15
 658:	88 bb       	out	0x18, r24	; 24
		PORTB|=Copy_u8Value;
 65a:	88 b3       	in	r24, 0x18	; 24
 65c:	68 2b       	or	r22, r24
 65e:	68 bb       	out	0x18, r22	; 24
		break;
 660:	08 95       	ret
		case DIOC :
		PORTC&=0x0f;
 662:	85 b3       	in	r24, 0x15	; 21
 664:	8f 70       	andi	r24, 0x0F	; 15
 666:	85 bb       	out	0x15, r24	; 21
		PORTC|=Copy_u8Value;
 668:	85 b3       	in	r24, 0x15	; 21
 66a:	68 2b       	or	r22, r24
 66c:	65 bb       	out	0x15, r22	; 21
		break;
 66e:	08 95       	ret
		case DIOD :
		PORTD&=0x0f;
 670:	82 b3       	in	r24, 0x12	; 18
 672:	8f 70       	andi	r24, 0x0F	; 15
 674:	82 bb       	out	0x12, r24	; 18
		PORTD|=Copy_u8Value;
 676:	82 b3       	in	r24, 0x12	; 18
 678:	68 2b       	or	r22, r24
 67a:	62 bb       	out	0x12, r22	; 18
 67c:	08 95       	ret

0000067e <main>:
#include "KEYPAD_interface.h"

int main(void)
{
	//MDIO_voidSetPortDirection(DIOC,OUTPUT);
	HLCD_voidInit();
 67e:	0e 94 0c 04 	call	0x818	; 0x818 <HLCD_voidInit>
	HKEYPAD_voidInit();
 682:	0e 94 56 03 	call	0x6ac	; 0x6ac <HKEYPAD_voidInit>
	u8 y;

	 
    while(1)
    {
   	y=HKEYPAD_u8Read();
 686:	0e 94 8f 03 	call	0x71e	; 0x71e <HKEYPAD_u8Read>
 68a:	c8 2f       	mov	r28, r24
   	MDIO_voidSetPortValue(DIOC,y);
 68c:	82 e0       	ldi	r24, 0x02	; 2
 68e:	6c 2f       	mov	r22, r28
 690:	0e 94 0d 02 	call	0x41a	; 0x41a <MDIO_voidSetPortValue>
   	if(y!=0xff)
 694:	cf 3f       	cpi	r28, 0xFF	; 255
 696:	19 f0       	breq	.+6      	; 0x69e <main+0x20>
   	{
	   	HLCD_voidSendChar(y);
 698:	8c 2f       	mov	r24, r28
 69a:	0e 94 4f 04 	call	0x89e	; 0x89e <HLCD_voidSendChar>
   	}
   	Delay_ms(400);
 69e:	60 e0       	ldi	r22, 0x00	; 0
 6a0:	70 e0       	ldi	r23, 0x00	; 0
 6a2:	88 ec       	ldi	r24, 0xC8	; 200
 6a4:	93 e4       	ldi	r25, 0x43	; 67
 6a6:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
    }
 6aa:	ed cf       	rjmp	.-38     	; 0x686 <main+0x8>

000006ac <HKEYPAD_voidInit>:


void HKEYPAD_voidInit(void)
{
   /* define first four pins as output pins */
   MDIO_voidSetPinDirection(KEYPAD_PORT,0,OUTPUT);	
 6ac:	83 e0       	ldi	r24, 0x03	; 3
 6ae:	60 e0       	ldi	r22, 0x00	; 0
 6b0:	41 e0       	ldi	r20, 0x01	; 1
 6b2:	0e 94 9b 00 	call	0x136	; 0x136 <MDIO_voidSetPinDirection>
   MDIO_voidSetPinDirection(KEYPAD_PORT,1,OUTPUT);
 6b6:	83 e0       	ldi	r24, 0x03	; 3
 6b8:	61 e0       	ldi	r22, 0x01	; 1
 6ba:	41 e0       	ldi	r20, 0x01	; 1
 6bc:	0e 94 9b 00 	call	0x136	; 0x136 <MDIO_voidSetPinDirection>
   MDIO_voidSetPinDirection(KEYPAD_PORT,2,OUTPUT);
 6c0:	83 e0       	ldi	r24, 0x03	; 3
 6c2:	62 e0       	ldi	r22, 0x02	; 2
 6c4:	41 e0       	ldi	r20, 0x01	; 1
 6c6:	0e 94 9b 00 	call	0x136	; 0x136 <MDIO_voidSetPinDirection>
   MDIO_voidSetPinDirection(KEYPAD_PORT,3,OUTPUT);
 6ca:	83 e0       	ldi	r24, 0x03	; 3
 6cc:	63 e0       	ldi	r22, 0x03	; 3
 6ce:	41 e0       	ldi	r20, 0x01	; 1
 6d0:	0e 94 9b 00 	call	0x136	; 0x136 <MDIO_voidSetPinDirection>
   /* define second four pins as input pins */
   MDIO_voidSetPinDirection(KEYPAD_PORT,4,INPUT);
 6d4:	83 e0       	ldi	r24, 0x03	; 3
 6d6:	64 e0       	ldi	r22, 0x04	; 4
 6d8:	40 e0       	ldi	r20, 0x00	; 0
 6da:	0e 94 9b 00 	call	0x136	; 0x136 <MDIO_voidSetPinDirection>
   MDIO_voidSetPinDirection(KEYPAD_PORT,5,INPUT);
 6de:	83 e0       	ldi	r24, 0x03	; 3
 6e0:	65 e0       	ldi	r22, 0x05	; 5
 6e2:	40 e0       	ldi	r20, 0x00	; 0
 6e4:	0e 94 9b 00 	call	0x136	; 0x136 <MDIO_voidSetPinDirection>
   MDIO_voidSetPinDirection(KEYPAD_PORT,6,INPUT);
 6e8:	83 e0       	ldi	r24, 0x03	; 3
 6ea:	66 e0       	ldi	r22, 0x06	; 6
 6ec:	40 e0       	ldi	r20, 0x00	; 0
 6ee:	0e 94 9b 00 	call	0x136	; 0x136 <MDIO_voidSetPinDirection>
   MDIO_voidSetPinDirection(KEYPAD_PORT,7,INPUT); 
 6f2:	83 e0       	ldi	r24, 0x03	; 3
 6f4:	67 e0       	ldi	r22, 0x07	; 7
 6f6:	40 e0       	ldi	r20, 0x00	; 0
 6f8:	0e 94 9b 00 	call	0x136	; 0x136 <MDIO_voidSetPinDirection>
   /* Enable internal pull up for input pins */
   MDIO_voidEnablePullUp(KEYPAD_PORT,4);  
 6fc:	83 e0       	ldi	r24, 0x03	; 3
 6fe:	64 e0       	ldi	r22, 0x04	; 4
 700:	0e 94 74 02 	call	0x4e8	; 0x4e8 <MDIO_voidEnablePullUp>
   MDIO_voidEnablePullUp(KEYPAD_PORT,5); 
 704:	83 e0       	ldi	r24, 0x03	; 3
 706:	65 e0       	ldi	r22, 0x05	; 5
 708:	0e 94 74 02 	call	0x4e8	; 0x4e8 <MDIO_voidEnablePullUp>
   MDIO_voidEnablePullUp(KEYPAD_PORT,6); 
 70c:	83 e0       	ldi	r24, 0x03	; 3
 70e:	66 e0       	ldi	r22, 0x06	; 6
 710:	0e 94 74 02 	call	0x4e8	; 0x4e8 <MDIO_voidEnablePullUp>
   MDIO_voidEnablePullUp(KEYPAD_PORT,7); 
 714:	83 e0       	ldi	r24, 0x03	; 3
 716:	67 e0       	ldi	r22, 0x07	; 7
 718:	0e 94 74 02 	call	0x4e8	; 0x4e8 <MDIO_voidEnablePullUp>
}
 71c:	08 95       	ret

0000071e <HKEYPAD_u8Read>:

u8 HKEYPAD_u8Read(void)
{
 71e:	0f 93       	push	r16
 720:	1f 93       	push	r17
 722:	cf 93       	push	r28
 724:	df 93       	push	r29
 726:	cd b7       	in	r28, 0x3d	; 61
 728:	de b7       	in	r29, 0x3e	; 62
 72a:	60 97       	sbiw	r28, 0x10	; 16
 72c:	0f b6       	in	r0, 0x3f	; 63
 72e:	f8 94       	cli
 730:	de bf       	out	0x3e, r29	; 62
 732:	0f be       	out	0x3f, r0	; 63
 734:	cd bf       	out	0x3d, r28	; 61
 u8 arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
 736:	de 01       	movw	r26, r28
 738:	11 96       	adiw	r26, 0x01	; 1
 73a:	e0 e6       	ldi	r30, 0x60	; 96
 73c:	f0 e0       	ldi	r31, 0x00	; 0
 73e:	80 e1       	ldi	r24, 0x10	; 16
 740:	01 90       	ld	r0, Z+
 742:	0d 92       	st	X+, r0
 744:	81 50       	subi	r24, 0x01	; 1
 746:	e1 f7       	brne	.-8      	; 0x740 <HKEYPAD_u8Read+0x22>
 u8 row,coloumn,x;
 u8 returnval=0xff;
 for(row=0;row<4;row++)
 748:	00 e0       	ldi	r16, 0x00	; 0
 {
	 MDIO_voidSetPinValue(DIOD,0,1);
 74a:	83 e0       	ldi	r24, 0x03	; 3
 74c:	60 e0       	ldi	r22, 0x00	; 0
 74e:	41 e0       	ldi	r20, 0x01	; 1
 750:	0e 94 51 01 	call	0x2a2	; 0x2a2 <MDIO_voidSetPinValue>
	 MDIO_voidSetPinValue(DIOD,1,1);
 754:	83 e0       	ldi	r24, 0x03	; 3
 756:	61 e0       	ldi	r22, 0x01	; 1
 758:	41 e0       	ldi	r20, 0x01	; 1
 75a:	0e 94 51 01 	call	0x2a2	; 0x2a2 <MDIO_voidSetPinValue>
	 MDIO_voidSetPinValue(DIOD,2,1);
 75e:	83 e0       	ldi	r24, 0x03	; 3
 760:	62 e0       	ldi	r22, 0x02	; 2
 762:	41 e0       	ldi	r20, 0x01	; 1
 764:	0e 94 51 01 	call	0x2a2	; 0x2a2 <MDIO_voidSetPinValue>
	 MDIO_voidSetPinValue(DIOD,3,1);
 768:	83 e0       	ldi	r24, 0x03	; 3
 76a:	63 e0       	ldi	r22, 0x03	; 3
 76c:	41 e0       	ldi	r20, 0x01	; 1
 76e:	0e 94 51 01 	call	0x2a2	; 0x2a2 <MDIO_voidSetPinValue>
	 MDIO_voidSetPinValue(DIOD,row,0);
 772:	83 e0       	ldi	r24, 0x03	; 3
 774:	60 2f       	mov	r22, r16
 776:	40 e0       	ldi	r20, 0x00	; 0
 778:	0e 94 51 01 	call	0x2a2	; 0x2a2 <MDIO_voidSetPinValue>
	 
	 for(coloumn=0;coloumn<4;coloumn++)
 77c:	10 e0       	ldi	r17, 0x00	; 0
	 {
		 x=MDIO_u8GetPinValue(DIOD,(coloumn+4));
 77e:	61 2f       	mov	r22, r17
 780:	6c 5f       	subi	r22, 0xFC	; 252
 782:	83 e0       	ldi	r24, 0x03	; 3
 784:	0e 94 da 01 	call	0x3b4	; 0x3b4 <MDIO_u8GetPinValue>
		 if(x==0)
 788:	88 23       	and	r24, r24
 78a:	61 f4       	brne	.+24     	; 0x7a4 <HKEYPAD_u8Read+0x86>
		 {
			 returnval=arr[row][coloumn];
 78c:	e0 2f       	mov	r30, r16
 78e:	f0 e0       	ldi	r31, 0x00	; 0
 790:	ee 0f       	add	r30, r30
 792:	ff 1f       	adc	r31, r31
 794:	ee 0f       	add	r30, r30
 796:	ff 1f       	adc	r31, r31
 798:	e1 0f       	add	r30, r17
 79a:	f1 1d       	adc	r31, r1
 79c:	ec 0f       	add	r30, r28
 79e:	fd 1f       	adc	r31, r29
 7a0:	81 81       	ldd	r24, Z+1	; 0x01
 7a2:	04 c0       	rjmp	.+8      	; 0x7ac <HKEYPAD_u8Read+0x8e>
	 MDIO_voidSetPinValue(DIOD,1,1);
	 MDIO_voidSetPinValue(DIOD,2,1);
	 MDIO_voidSetPinValue(DIOD,3,1);
	 MDIO_voidSetPinValue(DIOD,row,0);
	 
	 for(coloumn=0;coloumn<4;coloumn++)
 7a4:	1f 5f       	subi	r17, 0xFF	; 255
 7a6:	14 30       	cpi	r17, 0x04	; 4
 7a8:	51 f7       	brne	.-44     	; 0x77e <HKEYPAD_u8Read+0x60>
 7aa:	0b c0       	rjmp	.+22     	; 0x7c2 <HKEYPAD_u8Read+0xa4>
		 break;
	 }
 }
 return returnval ;
		
 7ac:	60 96       	adiw	r28, 0x10	; 16
 7ae:	0f b6       	in	r0, 0x3f	; 63
 7b0:	f8 94       	cli
 7b2:	de bf       	out	0x3e, r29	; 62
 7b4:	0f be       	out	0x3f, r0	; 63
 7b6:	cd bf       	out	0x3d, r28	; 61
 7b8:	df 91       	pop	r29
 7ba:	cf 91       	pop	r28
 7bc:	1f 91       	pop	r17
 7be:	0f 91       	pop	r16
 7c0:	08 95       	ret
u8 HKEYPAD_u8Read(void)
{
 u8 arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
 u8 row,coloumn,x;
 u8 returnval=0xff;
 for(row=0;row<4;row++)
 7c2:	0f 5f       	subi	r16, 0xFF	; 255
 7c4:	04 30       	cpi	r16, 0x04	; 4
 7c6:	09 f6       	brne	.-126    	; 0x74a <HKEYPAD_u8Read+0x2c>
 7c8:	8f ef       	ldi	r24, 0xFF	; 255
 7ca:	f0 cf       	rjmp	.-32     	; 0x7ac <HKEYPAD_u8Read+0x8e>

000007cc <HLCD_voidSendFallingEdge>:
   #endif
   
}

 void HLCD_voidSendFallingEdge(u8 Copy_u8Port)
{
 7cc:	cf 93       	push	r28
 7ce:	c8 2f       	mov	r28, r24
	MDIO_voidSetPinValue(Copy_u8Port,EN,HIGH);
 7d0:	60 e0       	ldi	r22, 0x00	; 0
 7d2:	41 e0       	ldi	r20, 0x01	; 1
 7d4:	0e 94 51 01 	call	0x2a2	; 0x2a2 <MDIO_voidSetPinValue>
	Delay_ms(4);
 7d8:	60 e0       	ldi	r22, 0x00	; 0
 7da:	70 e0       	ldi	r23, 0x00	; 0
 7dc:	80 e8       	ldi	r24, 0x80	; 128
 7de:	90 e4       	ldi	r25, 0x40	; 64
 7e0:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
	MDIO_voidSetPinValue(Copy_u8Port,EN,LOW);
 7e4:	8c 2f       	mov	r24, r28
 7e6:	60 e0       	ldi	r22, 0x00	; 0
 7e8:	40 e0       	ldi	r20, 0x00	; 0
 7ea:	0e 94 51 01 	call	0x2a2	; 0x2a2 <MDIO_voidSetPinValue>
	Delay_ms(4);	
 7ee:	60 e0       	ldi	r22, 0x00	; 0
 7f0:	70 e0       	ldi	r23, 0x00	; 0
 7f2:	80 e8       	ldi	r24, 0x80	; 128
 7f4:	90 e4       	ldi	r25, 0x40	; 64
 7f6:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
}
 7fa:	cf 91       	pop	r28
 7fc:	08 95       	ret

000007fe <HLCD_voidSendCommand>:

void HLCD_voidSendCommand(u8 Copy_u8Command)
{
 7fe:	68 2f       	mov	r22, r24
	#if   LCD_MODE == EIGHT_BITS_MODE 
	MDIO_voidSetPortValue(LCD_PORT,Copy_u8Command);
 800:	80 e0       	ldi	r24, 0x00	; 0
 802:	0e 94 0d 02 	call	0x41a	; 0x41a <MDIO_voidSetPortValue>
	MDIO_voidSetPinValue(DIOB,RS,LOW);
 806:	81 e0       	ldi	r24, 0x01	; 1
 808:	61 e0       	ldi	r22, 0x01	; 1
 80a:	40 e0       	ldi	r20, 0x00	; 0
 80c:	0e 94 51 01 	call	0x2a2	; 0x2a2 <MDIO_voidSetPinValue>
	HLCD_voidSendFallingEdge(DIOB);
 810:	81 e0       	ldi	r24, 0x01	; 1
 812:	0e 94 e6 03 	call	0x7cc	; 0x7cc <HLCD_voidSendFallingEdge>
	HLCD_voidSendFallingEdge(DIOB);
	MDIO_voidWriteHighNibble(LCD_PORT,Copy_u8Command);
	HLCD_voidSendFallingEdge(DIOB);
	Delay_ms(2);
	#endif
}
 816:	08 95       	ret

00000818 <HLCD_voidInit>:
#include "LCD_config.h"

void HLCD_voidInit(void)
{
	/* WAIT 400MS */
	Delay_ms(400);
 818:	60 e0       	ldi	r22, 0x00	; 0
 81a:	70 e0       	ldi	r23, 0x00	; 0
 81c:	88 ec       	ldi	r24, 0xC8	; 200
 81e:	93 e4       	ldi	r25, 0x43	; 67
 820:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
	/* define EN , RS , RW as output pins */
    MDIO_voidSetPinDirection(DIOB,EN,OUTPUT);
 824:	81 e0       	ldi	r24, 0x01	; 1
 826:	60 e0       	ldi	r22, 0x00	; 0
 828:	41 e0       	ldi	r20, 0x01	; 1
 82a:	0e 94 9b 00 	call	0x136	; 0x136 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(DIOB,RS,OUTPUT);
 82e:	81 e0       	ldi	r24, 0x01	; 1
 830:	61 e0       	ldi	r22, 0x01	; 1
 832:	41 e0       	ldi	r20, 0x01	; 1
 834:	0e 94 9b 00 	call	0x136	; 0x136 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(DIOB,RW,OUTPUT);
 838:	81 e0       	ldi	r24, 0x01	; 1
 83a:	62 e0       	ldi	r22, 0x02	; 2
 83c:	41 e0       	ldi	r20, 0x01	; 1
 83e:	0e 94 9b 00 	call	0x136	; 0x136 <MDIO_voidSetPinDirection>
   #if   LCD_MODE == EIGHT_BITS_MODE
   /* define lcd port as output */
   MDIO_voidSetPortDirection(LCD_PORT,OUTPUT);  
 842:	80 e0       	ldi	r24, 0x00	; 0
 844:	61 e0       	ldi	r22, 0x01	; 1
 846:	0e 94 24 01 	call	0x248	; 0x248 <MDIO_voidSetPortDirection>
   MDIO_voidSetPinValue(DIOB,RW,LOW); // set RW BIN WITH 0 TO WRITE
 84a:	81 e0       	ldi	r24, 0x01	; 1
 84c:	62 e0       	ldi	r22, 0x02	; 2
 84e:	40 e0       	ldi	r20, 0x00	; 0
 850:	0e 94 51 01 	call	0x2a2	; 0x2a2 <MDIO_voidSetPinValue>
   HLCD_voidSendCommand(EIGHT_BITS_CMD);  // to set the LCD at eight bit mode
 854:	88 e3       	ldi	r24, 0x38	; 56
 856:	0e 94 ff 03 	call	0x7fe	; 0x7fe <HLCD_voidSendCommand>
   Delay_ms(4);
 85a:	60 e0       	ldi	r22, 0x00	; 0
 85c:	70 e0       	ldi	r23, 0x00	; 0
 85e:	80 e8       	ldi	r24, 0x80	; 128
 860:	90 e4       	ldi	r25, 0x40	; 64
 862:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
   HLCD_voidSendCommand(DISPLAY_ON_CURSOR_ON); 
 866:	8e e0       	ldi	r24, 0x0E	; 14
 868:	0e 94 ff 03 	call	0x7fe	; 0x7fe <HLCD_voidSendCommand>
   Delay_ms(4);
 86c:	60 e0       	ldi	r22, 0x00	; 0
 86e:	70 e0       	ldi	r23, 0x00	; 0
 870:	80 e8       	ldi	r24, 0x80	; 128
 872:	90 e4       	ldi	r25, 0x40	; 64
 874:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
   HLCD_voidSendCommand(CLR_SCREEN_CMD);
 878:	81 e0       	ldi	r24, 0x01	; 1
 87a:	0e 94 ff 03 	call	0x7fe	; 0x7fe <HLCD_voidSendCommand>
   Delay_ms(20);
 87e:	60 e0       	ldi	r22, 0x00	; 0
 880:	70 e0       	ldi	r23, 0x00	; 0
 882:	80 ea       	ldi	r24, 0xA0	; 160
 884:	91 e4       	ldi	r25, 0x41	; 65
 886:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
   HLCD_voidSendCommand(ENTRY_MODE_CMD);
 88a:	86 e0       	ldi	r24, 0x06	; 6
 88c:	0e 94 ff 03 	call	0x7fe	; 0x7fe <HLCD_voidSendCommand>
   Delay_ms(4);  
 890:	60 e0       	ldi	r22, 0x00	; 0
 892:	70 e0       	ldi	r23, 0x00	; 0
 894:	80 e8       	ldi	r24, 0x80	; 128
 896:	90 e4       	ldi	r25, 0x40	; 64
 898:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
   Delay_ms(4);
   
   
   #endif
   
}
 89c:	08 95       	ret

0000089e <HLCD_voidSendChar>:
	Delay_ms(2);
	#endif
}

void HLCD_voidSendChar(u8 Copy_u8Char)
{
 89e:	68 2f       	mov	r22, r24
	#if   LCD_MODE== EIGHT_BITS_MODE
	MDIO_voidSetPortValue(LCD_PORT,Copy_u8Char); // Write char on port
 8a0:	80 e0       	ldi	r24, 0x00	; 0
 8a2:	0e 94 0d 02 	call	0x41a	; 0x41a <MDIO_voidSetPortValue>
	MDIO_voidSetPinValue(DIOB,RS,HIGH);      // set RS pin to write data
 8a6:	81 e0       	ldi	r24, 0x01	; 1
 8a8:	61 e0       	ldi	r22, 0x01	; 1
 8aa:	41 e0       	ldi	r20, 0x01	; 1
 8ac:	0e 94 51 01 	call	0x2a2	; 0x2a2 <MDIO_voidSetPinValue>
	HLCD_voidSendFallingEdge(DIOB);    // enable LCD
 8b0:	81 e0       	ldi	r24, 0x01	; 1
 8b2:	0e 94 e6 03 	call	0x7cc	; 0x7cc <HLCD_voidSendFallingEdge>
	MDIO_voidWriteHighNibble(LCD_PORT,Copy_u8Char);
	HLCD_voidSendFallingEdge(DIOB);	
	Delay_ms(2);
	#endif
	
}
 8b6:	08 95       	ret

000008b8 <HLCD_voidSendString>:

void HLCD_voidSendString(u8 *Copy_u8pString)
{
 8b8:	0f 93       	push	r16
 8ba:	1f 93       	push	r17
 8bc:	cf 93       	push	r28
 8be:	8c 01       	movw	r16, r24
	u8 Local_u8Counter;
	for (Local_u8Counter=0;Copy_u8pString[Local_u8Counter]!='\0';Local_u8Counter++)
 8c0:	fc 01       	movw	r30, r24
 8c2:	80 81       	ld	r24, Z
 8c4:	88 23       	and	r24, r24
 8c6:	51 f0       	breq	.+20     	; 0x8dc <HLCD_voidSendString+0x24>
 8c8:	c0 e0       	ldi	r28, 0x00	; 0
	{
		HLCD_voidSendChar(Copy_u8pString[Local_u8Counter]);
 8ca:	0e 94 4f 04 	call	0x89e	; 0x89e <HLCD_voidSendChar>
}

void HLCD_voidSendString(u8 *Copy_u8pString)
{
	u8 Local_u8Counter;
	for (Local_u8Counter=0;Copy_u8pString[Local_u8Counter]!='\0';Local_u8Counter++)
 8ce:	cf 5f       	subi	r28, 0xFF	; 255
 8d0:	f8 01       	movw	r30, r16
 8d2:	ec 0f       	add	r30, r28
 8d4:	f1 1d       	adc	r31, r1
 8d6:	80 81       	ld	r24, Z
 8d8:	88 23       	and	r24, r24
 8da:	b9 f7       	brne	.-18     	; 0x8ca <HLCD_voidSendString+0x12>
	{
		HLCD_voidSendChar(Copy_u8pString[Local_u8Counter]);
	}
}
 8dc:	cf 91       	pop	r28
 8de:	1f 91       	pop	r17
 8e0:	0f 91       	pop	r16
 8e2:	08 95       	ret

000008e4 <HLCD_voidClearScreen>:

void HLCD_voidClearScreen(void)
{
	HLCD_voidSendCommand(CLR_SCREEN_CMD);
 8e4:	81 e0       	ldi	r24, 0x01	; 1
 8e6:	0e 94 ff 03 	call	0x7fe	; 0x7fe <HLCD_voidSendCommand>
	Delay_ms(20);
 8ea:	60 e0       	ldi	r22, 0x00	; 0
 8ec:	70 e0       	ldi	r23, 0x00	; 0
 8ee:	80 ea       	ldi	r24, 0xA0	; 160
 8f0:	91 e4       	ldi	r25, 0x41	; 65
 8f2:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
}
 8f6:	08 95       	ret

000008f8 <HLCD_voidMoveCursor>:

void HLCD_voidMoveCursor(u8 Copy_u8Row,u8 Copy_u8Col)
{
	u8 Local_u8ReqLocation;
	if(Copy_u8Row<1 || Copy_u8Row>2 || Copy_u8Col<1 ||Copy_u8Col>16)
 8f8:	28 2f       	mov	r18, r24
 8fa:	21 50       	subi	r18, 0x01	; 1
 8fc:	22 30       	cpi	r18, 0x02	; 2
 8fe:	70 f4       	brcc	.+28     	; 0x91c <HLCD_voidMoveCursor+0x24>
 900:	66 23       	and	r22, r22
 902:	71 f0       	breq	.+28     	; 0x920 <HLCD_voidMoveCursor+0x28>
 904:	61 31       	cpi	r22, 0x11	; 17
 906:	70 f4       	brcc	.+28     	; 0x924 <HLCD_voidMoveCursor+0x2c>
	{
		Local_u8ReqLocation=0x80; // put the cursor on the first line
	}
	else if(Copy_u8Row==1)
 908:	81 30       	cpi	r24, 0x01	; 1
 90a:	19 f4       	brne	.+6      	; 0x912 <HLCD_voidMoveCursor+0x1a>
	{
		Local_u8ReqLocation=0x80+Copy_u8Col-1;
 90c:	96 2f       	mov	r25, r22
 90e:	91 58       	subi	r25, 0x81	; 129
 910:	0a c0       	rjmp	.+20     	; 0x926 <HLCD_voidMoveCursor+0x2e>
	}
	else if (Copy_u8Row==2)
 912:	82 30       	cpi	r24, 0x02	; 2
 914:	41 f4       	brne	.+16     	; 0x926 <HLCD_voidMoveCursor+0x2e>
	{
		Local_u8ReqLocation=0xc0+Copy_u8Col-1;
 916:	96 2f       	mov	r25, r22
 918:	91 54       	subi	r25, 0x41	; 65
 91a:	05 c0       	rjmp	.+10     	; 0x926 <HLCD_voidMoveCursor+0x2e>
void HLCD_voidMoveCursor(u8 Copy_u8Row,u8 Copy_u8Col)
{
	u8 Local_u8ReqLocation;
	if(Copy_u8Row<1 || Copy_u8Row>2 || Copy_u8Col<1 ||Copy_u8Col>16)
	{
		Local_u8ReqLocation=0x80; // put the cursor on the first line
 91c:	90 e8       	ldi	r25, 0x80	; 128
 91e:	03 c0       	rjmp	.+6      	; 0x926 <HLCD_voidMoveCursor+0x2e>
 920:	90 e8       	ldi	r25, 0x80	; 128
 922:	01 c0       	rjmp	.+2      	; 0x926 <HLCD_voidMoveCursor+0x2e>
 924:	90 e8       	ldi	r25, 0x80	; 128
	}
	else
	{
		// do nothing
	}
	HLCD_voidSendCommand(Local_u8ReqLocation);
 926:	89 2f       	mov	r24, r25
 928:	0e 94 ff 03 	call	0x7fe	; 0x7fe <HLCD_voidSendCommand>
	Delay_ms(2);
 92c:	60 e0       	ldi	r22, 0x00	; 0
 92e:	70 e0       	ldi	r23, 0x00	; 0
 930:	80 e0       	ldi	r24, 0x00	; 0
 932:	90 e4       	ldi	r25, 0x40	; 64
 934:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
	
 938:	08 95       	ret

0000093a <__divsf3>:
 93a:	0c d0       	rcall	.+24     	; 0x954 <__divsf3x>
 93c:	a9 c0       	rjmp	.+338    	; 0xa90 <__fp_round>
 93e:	a1 d0       	rcall	.+322    	; 0xa82 <__fp_pscB>
 940:	40 f0       	brcs	.+16     	; 0x952 <__divsf3+0x18>
 942:	98 d0       	rcall	.+304    	; 0xa74 <__fp_pscA>
 944:	30 f0       	brcs	.+12     	; 0x952 <__divsf3+0x18>
 946:	21 f4       	brne	.+8      	; 0x950 <__divsf3+0x16>
 948:	5f 3f       	cpi	r21, 0xFF	; 255
 94a:	19 f0       	breq	.+6      	; 0x952 <__divsf3+0x18>
 94c:	8a c0       	rjmp	.+276    	; 0xa62 <__fp_inf>
 94e:	51 11       	cpse	r21, r1
 950:	d3 c0       	rjmp	.+422    	; 0xaf8 <__fp_szero>
 952:	8d c0       	rjmp	.+282    	; 0xa6e <__fp_nan>

00000954 <__divsf3x>:
 954:	ae d0       	rcall	.+348    	; 0xab2 <__fp_split3>
 956:	98 f3       	brcs	.-26     	; 0x93e <__divsf3+0x4>

00000958 <__divsf3_pse>:
 958:	99 23       	and	r25, r25
 95a:	c9 f3       	breq	.-14     	; 0x94e <__divsf3+0x14>
 95c:	55 23       	and	r21, r21
 95e:	b1 f3       	breq	.-20     	; 0x94c <__divsf3+0x12>
 960:	95 1b       	sub	r25, r21
 962:	55 0b       	sbc	r21, r21
 964:	bb 27       	eor	r27, r27
 966:	aa 27       	eor	r26, r26
 968:	62 17       	cp	r22, r18
 96a:	73 07       	cpc	r23, r19
 96c:	84 07       	cpc	r24, r20
 96e:	38 f0       	brcs	.+14     	; 0x97e <__divsf3_pse+0x26>
 970:	9f 5f       	subi	r25, 0xFF	; 255
 972:	5f 4f       	sbci	r21, 0xFF	; 255
 974:	22 0f       	add	r18, r18
 976:	33 1f       	adc	r19, r19
 978:	44 1f       	adc	r20, r20
 97a:	aa 1f       	adc	r26, r26
 97c:	a9 f3       	breq	.-22     	; 0x968 <__divsf3_pse+0x10>
 97e:	33 d0       	rcall	.+102    	; 0x9e6 <__divsf3_pse+0x8e>
 980:	0e 2e       	mov	r0, r30
 982:	3a f0       	brmi	.+14     	; 0x992 <__divsf3_pse+0x3a>
 984:	e0 e8       	ldi	r30, 0x80	; 128
 986:	30 d0       	rcall	.+96     	; 0x9e8 <__divsf3_pse+0x90>
 988:	91 50       	subi	r25, 0x01	; 1
 98a:	50 40       	sbci	r21, 0x00	; 0
 98c:	e6 95       	lsr	r30
 98e:	00 1c       	adc	r0, r0
 990:	ca f7       	brpl	.-14     	; 0x984 <__divsf3_pse+0x2c>
 992:	29 d0       	rcall	.+82     	; 0x9e6 <__divsf3_pse+0x8e>
 994:	fe 2f       	mov	r31, r30
 996:	27 d0       	rcall	.+78     	; 0x9e6 <__divsf3_pse+0x8e>
 998:	66 0f       	add	r22, r22
 99a:	77 1f       	adc	r23, r23
 99c:	88 1f       	adc	r24, r24
 99e:	bb 1f       	adc	r27, r27
 9a0:	26 17       	cp	r18, r22
 9a2:	37 07       	cpc	r19, r23
 9a4:	48 07       	cpc	r20, r24
 9a6:	ab 07       	cpc	r26, r27
 9a8:	b0 e8       	ldi	r27, 0x80	; 128
 9aa:	09 f0       	breq	.+2      	; 0x9ae <__divsf3_pse+0x56>
 9ac:	bb 0b       	sbc	r27, r27
 9ae:	80 2d       	mov	r24, r0
 9b0:	bf 01       	movw	r22, r30
 9b2:	ff 27       	eor	r31, r31
 9b4:	93 58       	subi	r25, 0x83	; 131
 9b6:	5f 4f       	sbci	r21, 0xFF	; 255
 9b8:	2a f0       	brmi	.+10     	; 0x9c4 <__divsf3_pse+0x6c>
 9ba:	9e 3f       	cpi	r25, 0xFE	; 254
 9bc:	51 05       	cpc	r21, r1
 9be:	68 f0       	brcs	.+26     	; 0x9da <__divsf3_pse+0x82>
 9c0:	50 c0       	rjmp	.+160    	; 0xa62 <__fp_inf>
 9c2:	9a c0       	rjmp	.+308    	; 0xaf8 <__fp_szero>
 9c4:	5f 3f       	cpi	r21, 0xFF	; 255
 9c6:	ec f3       	brlt	.-6      	; 0x9c2 <__divsf3_pse+0x6a>
 9c8:	98 3e       	cpi	r25, 0xE8	; 232
 9ca:	dc f3       	brlt	.-10     	; 0x9c2 <__divsf3_pse+0x6a>
 9cc:	86 95       	lsr	r24
 9ce:	77 95       	ror	r23
 9d0:	67 95       	ror	r22
 9d2:	b7 95       	ror	r27
 9d4:	f7 95       	ror	r31
 9d6:	9f 5f       	subi	r25, 0xFF	; 255
 9d8:	c9 f7       	brne	.-14     	; 0x9cc <__divsf3_pse+0x74>
 9da:	88 0f       	add	r24, r24
 9dc:	91 1d       	adc	r25, r1
 9de:	96 95       	lsr	r25
 9e0:	87 95       	ror	r24
 9e2:	97 f9       	bld	r25, 7
 9e4:	08 95       	ret
 9e6:	e1 e0       	ldi	r30, 0x01	; 1
 9e8:	66 0f       	add	r22, r22
 9ea:	77 1f       	adc	r23, r23
 9ec:	88 1f       	adc	r24, r24
 9ee:	bb 1f       	adc	r27, r27
 9f0:	62 17       	cp	r22, r18
 9f2:	73 07       	cpc	r23, r19
 9f4:	84 07       	cpc	r24, r20
 9f6:	ba 07       	cpc	r27, r26
 9f8:	20 f0       	brcs	.+8      	; 0xa02 <__divsf3_pse+0xaa>
 9fa:	62 1b       	sub	r22, r18
 9fc:	73 0b       	sbc	r23, r19
 9fe:	84 0b       	sbc	r24, r20
 a00:	ba 0b       	sbc	r27, r26
 a02:	ee 1f       	adc	r30, r30
 a04:	88 f7       	brcc	.-30     	; 0x9e8 <__divsf3_pse+0x90>
 a06:	e0 95       	com	r30
 a08:	08 95       	ret

00000a0a <__fixunssfsi>:
 a0a:	5b d0       	rcall	.+182    	; 0xac2 <__fp_splitA>
 a0c:	88 f0       	brcs	.+34     	; 0xa30 <__fixunssfsi+0x26>
 a0e:	9f 57       	subi	r25, 0x7F	; 127
 a10:	90 f0       	brcs	.+36     	; 0xa36 <__fixunssfsi+0x2c>
 a12:	b9 2f       	mov	r27, r25
 a14:	99 27       	eor	r25, r25
 a16:	b7 51       	subi	r27, 0x17	; 23
 a18:	a0 f0       	brcs	.+40     	; 0xa42 <__fixunssfsi+0x38>
 a1a:	d1 f0       	breq	.+52     	; 0xa50 <__fixunssfsi+0x46>
 a1c:	66 0f       	add	r22, r22
 a1e:	77 1f       	adc	r23, r23
 a20:	88 1f       	adc	r24, r24
 a22:	99 1f       	adc	r25, r25
 a24:	1a f0       	brmi	.+6      	; 0xa2c <__fixunssfsi+0x22>
 a26:	ba 95       	dec	r27
 a28:	c9 f7       	brne	.-14     	; 0xa1c <__fixunssfsi+0x12>
 a2a:	12 c0       	rjmp	.+36     	; 0xa50 <__fixunssfsi+0x46>
 a2c:	b1 30       	cpi	r27, 0x01	; 1
 a2e:	81 f0       	breq	.+32     	; 0xa50 <__fixunssfsi+0x46>
 a30:	62 d0       	rcall	.+196    	; 0xaf6 <__fp_zero>
 a32:	b1 e0       	ldi	r27, 0x01	; 1
 a34:	08 95       	ret
 a36:	5f c0       	rjmp	.+190    	; 0xaf6 <__fp_zero>
 a38:	67 2f       	mov	r22, r23
 a3a:	78 2f       	mov	r23, r24
 a3c:	88 27       	eor	r24, r24
 a3e:	b8 5f       	subi	r27, 0xF8	; 248
 a40:	39 f0       	breq	.+14     	; 0xa50 <__fixunssfsi+0x46>
 a42:	b9 3f       	cpi	r27, 0xF9	; 249
 a44:	cc f3       	brlt	.-14     	; 0xa38 <__fixunssfsi+0x2e>
 a46:	86 95       	lsr	r24
 a48:	77 95       	ror	r23
 a4a:	67 95       	ror	r22
 a4c:	b3 95       	inc	r27
 a4e:	d9 f7       	brne	.-10     	; 0xa46 <__fixunssfsi+0x3c>
 a50:	3e f4       	brtc	.+14     	; 0xa60 <__fixunssfsi+0x56>
 a52:	90 95       	com	r25
 a54:	80 95       	com	r24
 a56:	70 95       	com	r23
 a58:	61 95       	neg	r22
 a5a:	7f 4f       	sbci	r23, 0xFF	; 255
 a5c:	8f 4f       	sbci	r24, 0xFF	; 255
 a5e:	9f 4f       	sbci	r25, 0xFF	; 255
 a60:	08 95       	ret

00000a62 <__fp_inf>:
 a62:	97 f9       	bld	r25, 7
 a64:	9f 67       	ori	r25, 0x7F	; 127
 a66:	80 e8       	ldi	r24, 0x80	; 128
 a68:	70 e0       	ldi	r23, 0x00	; 0
 a6a:	60 e0       	ldi	r22, 0x00	; 0
 a6c:	08 95       	ret

00000a6e <__fp_nan>:
 a6e:	9f ef       	ldi	r25, 0xFF	; 255
 a70:	80 ec       	ldi	r24, 0xC0	; 192
 a72:	08 95       	ret

00000a74 <__fp_pscA>:
 a74:	00 24       	eor	r0, r0
 a76:	0a 94       	dec	r0
 a78:	16 16       	cp	r1, r22
 a7a:	17 06       	cpc	r1, r23
 a7c:	18 06       	cpc	r1, r24
 a7e:	09 06       	cpc	r0, r25
 a80:	08 95       	ret

00000a82 <__fp_pscB>:
 a82:	00 24       	eor	r0, r0
 a84:	0a 94       	dec	r0
 a86:	12 16       	cp	r1, r18
 a88:	13 06       	cpc	r1, r19
 a8a:	14 06       	cpc	r1, r20
 a8c:	05 06       	cpc	r0, r21
 a8e:	08 95       	ret

00000a90 <__fp_round>:
 a90:	09 2e       	mov	r0, r25
 a92:	03 94       	inc	r0
 a94:	00 0c       	add	r0, r0
 a96:	11 f4       	brne	.+4      	; 0xa9c <__fp_round+0xc>
 a98:	88 23       	and	r24, r24
 a9a:	52 f0       	brmi	.+20     	; 0xab0 <__fp_round+0x20>
 a9c:	bb 0f       	add	r27, r27
 a9e:	40 f4       	brcc	.+16     	; 0xab0 <__fp_round+0x20>
 aa0:	bf 2b       	or	r27, r31
 aa2:	11 f4       	brne	.+4      	; 0xaa8 <__fp_round+0x18>
 aa4:	60 ff       	sbrs	r22, 0
 aa6:	04 c0       	rjmp	.+8      	; 0xab0 <__fp_round+0x20>
 aa8:	6f 5f       	subi	r22, 0xFF	; 255
 aaa:	7f 4f       	sbci	r23, 0xFF	; 255
 aac:	8f 4f       	sbci	r24, 0xFF	; 255
 aae:	9f 4f       	sbci	r25, 0xFF	; 255
 ab0:	08 95       	ret

00000ab2 <__fp_split3>:
 ab2:	57 fd       	sbrc	r21, 7
 ab4:	90 58       	subi	r25, 0x80	; 128
 ab6:	44 0f       	add	r20, r20
 ab8:	55 1f       	adc	r21, r21
 aba:	59 f0       	breq	.+22     	; 0xad2 <__fp_splitA+0x10>
 abc:	5f 3f       	cpi	r21, 0xFF	; 255
 abe:	71 f0       	breq	.+28     	; 0xadc <__fp_splitA+0x1a>
 ac0:	47 95       	ror	r20

00000ac2 <__fp_splitA>:
 ac2:	88 0f       	add	r24, r24
 ac4:	97 fb       	bst	r25, 7
 ac6:	99 1f       	adc	r25, r25
 ac8:	61 f0       	breq	.+24     	; 0xae2 <__fp_splitA+0x20>
 aca:	9f 3f       	cpi	r25, 0xFF	; 255
 acc:	79 f0       	breq	.+30     	; 0xaec <__fp_splitA+0x2a>
 ace:	87 95       	ror	r24
 ad0:	08 95       	ret
 ad2:	12 16       	cp	r1, r18
 ad4:	13 06       	cpc	r1, r19
 ad6:	14 06       	cpc	r1, r20
 ad8:	55 1f       	adc	r21, r21
 ada:	f2 cf       	rjmp	.-28     	; 0xac0 <__fp_split3+0xe>
 adc:	46 95       	lsr	r20
 ade:	f1 df       	rcall	.-30     	; 0xac2 <__fp_splitA>
 ae0:	08 c0       	rjmp	.+16     	; 0xaf2 <__fp_splitA+0x30>
 ae2:	16 16       	cp	r1, r22
 ae4:	17 06       	cpc	r1, r23
 ae6:	18 06       	cpc	r1, r24
 ae8:	99 1f       	adc	r25, r25
 aea:	f1 cf       	rjmp	.-30     	; 0xace <__fp_splitA+0xc>
 aec:	86 95       	lsr	r24
 aee:	71 05       	cpc	r23, r1
 af0:	61 05       	cpc	r22, r1
 af2:	08 94       	sec
 af4:	08 95       	ret

00000af6 <__fp_zero>:
 af6:	e8 94       	clt

00000af8 <__fp_szero>:
 af8:	bb 27       	eor	r27, r27
 afa:	66 27       	eor	r22, r22
 afc:	77 27       	eor	r23, r23
 afe:	cb 01       	movw	r24, r22
 b00:	97 f9       	bld	r25, 7
 b02:	08 95       	ret

00000b04 <__mulsf3>:
 b04:	0b d0       	rcall	.+22     	; 0xb1c <__mulsf3x>
 b06:	c4 cf       	rjmp	.-120    	; 0xa90 <__fp_round>
 b08:	b5 df       	rcall	.-150    	; 0xa74 <__fp_pscA>
 b0a:	28 f0       	brcs	.+10     	; 0xb16 <__mulsf3+0x12>
 b0c:	ba df       	rcall	.-140    	; 0xa82 <__fp_pscB>
 b0e:	18 f0       	brcs	.+6      	; 0xb16 <__mulsf3+0x12>
 b10:	95 23       	and	r25, r21
 b12:	09 f0       	breq	.+2      	; 0xb16 <__mulsf3+0x12>
 b14:	a6 cf       	rjmp	.-180    	; 0xa62 <__fp_inf>
 b16:	ab cf       	rjmp	.-170    	; 0xa6e <__fp_nan>
 b18:	11 24       	eor	r1, r1
 b1a:	ee cf       	rjmp	.-36     	; 0xaf8 <__fp_szero>

00000b1c <__mulsf3x>:
 b1c:	ca df       	rcall	.-108    	; 0xab2 <__fp_split3>
 b1e:	a0 f3       	brcs	.-24     	; 0xb08 <__mulsf3+0x4>

00000b20 <__mulsf3_pse>:
 b20:	95 9f       	mul	r25, r21
 b22:	d1 f3       	breq	.-12     	; 0xb18 <__mulsf3+0x14>
 b24:	95 0f       	add	r25, r21
 b26:	50 e0       	ldi	r21, 0x00	; 0
 b28:	55 1f       	adc	r21, r21
 b2a:	62 9f       	mul	r22, r18
 b2c:	f0 01       	movw	r30, r0
 b2e:	72 9f       	mul	r23, r18
 b30:	bb 27       	eor	r27, r27
 b32:	f0 0d       	add	r31, r0
 b34:	b1 1d       	adc	r27, r1
 b36:	63 9f       	mul	r22, r19
 b38:	aa 27       	eor	r26, r26
 b3a:	f0 0d       	add	r31, r0
 b3c:	b1 1d       	adc	r27, r1
 b3e:	aa 1f       	adc	r26, r26
 b40:	64 9f       	mul	r22, r20
 b42:	66 27       	eor	r22, r22
 b44:	b0 0d       	add	r27, r0
 b46:	a1 1d       	adc	r26, r1
 b48:	66 1f       	adc	r22, r22
 b4a:	82 9f       	mul	r24, r18
 b4c:	22 27       	eor	r18, r18
 b4e:	b0 0d       	add	r27, r0
 b50:	a1 1d       	adc	r26, r1
 b52:	62 1f       	adc	r22, r18
 b54:	73 9f       	mul	r23, r19
 b56:	b0 0d       	add	r27, r0
 b58:	a1 1d       	adc	r26, r1
 b5a:	62 1f       	adc	r22, r18
 b5c:	83 9f       	mul	r24, r19
 b5e:	a0 0d       	add	r26, r0
 b60:	61 1d       	adc	r22, r1
 b62:	22 1f       	adc	r18, r18
 b64:	74 9f       	mul	r23, r20
 b66:	33 27       	eor	r19, r19
 b68:	a0 0d       	add	r26, r0
 b6a:	61 1d       	adc	r22, r1
 b6c:	23 1f       	adc	r18, r19
 b6e:	84 9f       	mul	r24, r20
 b70:	60 0d       	add	r22, r0
 b72:	21 1d       	adc	r18, r1
 b74:	82 2f       	mov	r24, r18
 b76:	76 2f       	mov	r23, r22
 b78:	6a 2f       	mov	r22, r26
 b7a:	11 24       	eor	r1, r1
 b7c:	9f 57       	subi	r25, 0x7F	; 127
 b7e:	50 40       	sbci	r21, 0x00	; 0
 b80:	8a f0       	brmi	.+34     	; 0xba4 <__mulsf3_pse+0x84>
 b82:	e1 f0       	breq	.+56     	; 0xbbc <__mulsf3_pse+0x9c>
 b84:	88 23       	and	r24, r24
 b86:	4a f0       	brmi	.+18     	; 0xb9a <__mulsf3_pse+0x7a>
 b88:	ee 0f       	add	r30, r30
 b8a:	ff 1f       	adc	r31, r31
 b8c:	bb 1f       	adc	r27, r27
 b8e:	66 1f       	adc	r22, r22
 b90:	77 1f       	adc	r23, r23
 b92:	88 1f       	adc	r24, r24
 b94:	91 50       	subi	r25, 0x01	; 1
 b96:	50 40       	sbci	r21, 0x00	; 0
 b98:	a9 f7       	brne	.-22     	; 0xb84 <__mulsf3_pse+0x64>
 b9a:	9e 3f       	cpi	r25, 0xFE	; 254
 b9c:	51 05       	cpc	r21, r1
 b9e:	70 f0       	brcs	.+28     	; 0xbbc <__mulsf3_pse+0x9c>
 ba0:	60 cf       	rjmp	.-320    	; 0xa62 <__fp_inf>
 ba2:	aa cf       	rjmp	.-172    	; 0xaf8 <__fp_szero>
 ba4:	5f 3f       	cpi	r21, 0xFF	; 255
 ba6:	ec f3       	brlt	.-6      	; 0xba2 <__mulsf3_pse+0x82>
 ba8:	98 3e       	cpi	r25, 0xE8	; 232
 baa:	dc f3       	brlt	.-10     	; 0xba2 <__mulsf3_pse+0x82>
 bac:	86 95       	lsr	r24
 bae:	77 95       	ror	r23
 bb0:	67 95       	ror	r22
 bb2:	b7 95       	ror	r27
 bb4:	f7 95       	ror	r31
 bb6:	e7 95       	ror	r30
 bb8:	9f 5f       	subi	r25, 0xFF	; 255
 bba:	c1 f7       	brne	.-16     	; 0xbac <__mulsf3_pse+0x8c>
 bbc:	fe 2b       	or	r31, r30
 bbe:	88 0f       	add	r24, r24
 bc0:	91 1d       	adc	r25, r1
 bc2:	96 95       	lsr	r25
 bc4:	87 95       	ror	r24
 bc6:	97 f9       	bld	r25, 7
 bc8:	08 95       	ret

00000bca <_exit>:
 bca:	f8 94       	cli

00000bcc <__stop_program>:
 bcc:	ff cf       	rjmp	.-2      	; 0xbcc <__stop_program>
